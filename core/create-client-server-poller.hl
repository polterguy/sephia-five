
/*
 * Creates an (invisible) widget that constantly polls the server to check
 * if new emails have arrived.
 *
 * This widget will create a timer function in JavaScript, that checks the server every n'th second,
 * to see if new emails have arrived. It will constantly run in the background, and notify the user
 * through a "bubble" window if new emails have arrived.
 *
 * If the POP3 "user thread" throws an exception, it will also display that exception to the user.
 *
 * This file also resets the "count" which is incremented once for each POP3 check operation in our "user thread",
 * which unless it is reset before it reaches "5", will allow the "POP3 user thread" to simply finish its work, and die out.
 */





/*
 * Loading configuration to check how frequently we should poll the server.
 */
load-file:@SEPHIA/config/pop3-thread.hl
set:x:/../*/create-literal-widget/**/_sleep-between-fetch?value
  src:x:/@load-file/*/*/sleep-between-fetch?value





/*
 * Creating actual (hidden) "poller widget", that polls the server every n'th second, to check for new emails.
 */
create-literal-widget:sephia-poller
  element:span
  style:"display:none; !important"
  oninit

    /*
     * Invoking checker initially, which will start our "loop".
     */
    sephia._internals.check-emails

  events

    /*
     * Creates a JavaScript object that will poll towards the server, 
     * invoking our [.oncheck] below, after n seconds.
     */
    sephia._internals.create-poller-javascript

      /*
       * Checking if caller requested a "slow" fetcher, at which point we
       * only poll towards the server every 5 minutes, only to avoid user being thrown out
       * of his session, while composing emails and browsing his inbox.
       */
      if:x:/../*/slow?value
        set:x:/../*/_sleep-between-fetch?value
          src:300000

      /*
       * Notice, this JavaScript timeout function is created such that if an exception happens during
       * polling the server, no new timer poll object will be created.
       */
      _sleep-between-fetch
      p5.web.send-javascript:@"
if (!p5.sephia_poller) {{
  p5.sephia_poller=true;
  setTimeout(function() {{
    delete p5.sephia_poller;
    p5.$('sephia-poller').raise('.oncheck')
  }}, {0});
}}"
        :x:/@_sleep-between-fetch?value

    /*
     * Checks to see if emails have arrived from POP3 server, and notifies user
     * if new emails have arrived.
     */
    sephia._internals.check-emails

      /*
       * We'll need this later to parametrize some of our invocations below.
       */
      whoami

      /*
       * Making sure we have easy access to "thread signal object".
       */
      eval-x:x:/+
      _thread-signal:sephia.core.thread-signal-{0}
        :x:/@whoami/*/username?value

      /*
       * Making sure we have synchronised access to our "thread signal object".
       *
       * Notice, p5.data is thread safe, but some other thread might still need to first select this item,
       * for then to insert a modification of it somehow. Hence, we'll need synchronized access to it.
       * Trying to keep our locks as small as possible
       */
      read-lock:x:/@_thread-signal?value

        /*
         * Retrieving the thread signal object from p5.data.
         */
        select-data:x:/*/*/{0}
          :x:/@_thread-signal?value

      /*
       * Checking if new emails have arrived since our last poll towards the server, making sure
       * we have synchronised access to signal object.
       */
      _new-emails:bool:false
      write-lock:sephia.core.thread-signal-{0}-new-emails
        :x:/@whoami/*/username?value

        /*
         * Checking if user received new emails since our last poll.
         */
        select-data:x:/*/*/sephia.core.thread-signal-{0}-new-emails
          :x:/@whoami/*/username?value
        if:x:/@select-data/*/*?value
          =:bool:true

          /*
           * User has received new emails since the last poll towards the server.
           *
           * Storing that fact, and making sure we delete signal object.
           */
          set:x:/@_new-emails?value
            src:bool:true
          delete-data:x:/*/*/sephia.core.thread-signal-{0}-new-emails
            :x:/@whoami/*/username?value

          /*
           * Making sure we delete any "temporary fast pollers".
           */
          p5.web.session.set:sephia.core.temporary-fast-poller

        else-if:x:/@select-data/*/*?value
          =:bool:false

          /*
           * No new emails, but fetcher thread has done its job.
           *
           * Making sure we stop creating temporary fast pollers, and delete our
           * signal object.
           */
          p5.web.session.set:sephia.core.temporary-fast-poller
          delete-data:x:/*/*/sephia.core.thread-signal-{0}-new-emails
            :x:/@whoami/*/username?value

      /*
       * Checking if thread is still running.
       */
      if:x:/@read-lock/*/select-data/*/*/running?value

        /*
         * Thread is still running.
         * Making sure we poll towards server again after some n seconds.
         */
        sephia._internals.create-poller-javascript

        /*
         * Making sure we have synchronised access to our "thread signal object".
         */
        write-lock:x:/@_thread-signal?value

          /*
           * Zeroing out "thread count" to make sure thread doesn't stop running.
           */
          update-data:x:/*/*/{0}/*/running/*/count?value
            :x:/@_thread-signal?value
            src:int:0

      else-if:x:/@read-lock/*/select-data/*/*/restart?value

        /*
         * Thread was stopped and should be restarted for some reasons.
         * Might be caused by for instance that the user's settings was changed.
         */
        micro.evaluate.file:@SEPHIA/core/create-pop3-user-thread.hl
          force-restart:bool:true
        sephia._internals.create-poller-javascript

      else-if:x:/@read-lock/*/select-data/*/*/error

        /*
         * Thread has stopped running, and contains an error exception message.
         *
         * Invoking our "error handler".
         */
        eval-x:x:/+/*
        micro.evaluate.file:@SEPHIA/core/handle-pop3-error.hl
          message:x:/@read-lock/*/select-data/*/*/error/*/message?value
          stack-trace:x:/@read-lock/*/select-data/*/*/error/*/stack-trace?value
          type:x:/@read-lock/*/select-data/*/*/error/*/type?value

      else-if:x:/@read-lock/*/select-data/*/*/last-fetch

        /*
         * We don't have a worker thread at this point, since user's configuration
         * is setup such that user is only allowed to fetch his emails during specific
         * times of the day.
         *
         * Trying to invoke file that checks for emails, which will not work, unless the user
         * is allowed to check his emails at this particular time of the day.
         */
        micro.evaluate.file:@SEPHIA/core/create-pop3-user-thread.hl
        if:x:/@micro.evaluate.file?value
          =:bool:true

          /*
           * Sephia Five is now checking for emails for the user.
           *
           * Creating a temporary "fast poller" while we're checking for emails, 
           * and making sure our next pollers also are "fast".
           */
          sephia._internals.create-poller-javascript
          p5.web.session.set:sephia.core.temporary-fast-poller
            src:bool:true

        else

          /*
           * To make sure we keep the session object alive, we create a slow poller,
           * who's purpose is only to make sure the user is not thrown out from his session, 
           * as he is writing emails, and browsing around his existing emails.
           *
           * Notice, if we have a "temporary fast" poller, we create a fast one instead,
           * which happens when Sephia is currently checking for emails at POP3 server, due
           * to the "next time of day to check for emails" have arrived.
           */
          p5.web.session.get:sephia.core.temporary-fast-poller
          if:x:/-/*?value

            /*
             * Creating temporary fast poller.
             */
            sephia._internals.create-poller-javascript

          else

            /*
             * Creating slow poller.
             */
            sephia._internals.create-poller-javascript
              slow:bool:true

      else

        /*
         * Synchronization object was somehow deleted, which means that our "worker thread"
         * will soon choke, when trying to increment its [count].
         * This migh happen due to a server restart, or similar events, that recycles the process.
         * Regardless, we simply create another poller, since a future poll will show this error.
         */
        sephia._internals.create-poller-javascript

      /*
       * Checking if user received new emails since the last poll operation.
       */
      if:x:/@_new-emails?value

        /*
         * User has received new emails, making sure we update email count.
         */
        micro.evaluate.file:@SEPHIA/inbox/update-page-title.hl

        /*
         * Then we check if user has paged his inbox, or filtered it somehow, and if not,
         * we automatically re-databind his inbox.
         *
         * Notice, before we do this, we need to check if his inbox is currently being displayed,
         * which might not be the case, if user has opened his settings, etc.
         */
        if
          fetch:x:/0/0?value
            widget-exists:sephia-search-txt

          /*
           * User's inbox is currently being displayed, now checking if he has filtered it.
           */
          get-widget-property:sephia-search-txt
            value
          if:x:/@get-widget-property/*/*?value
            not
            or:x:/@get-widget-property/*/*?value
              =:

            /*
             * User has no filter in his search textbox, now checking if he has paged.
             */
            get-widget-property:sephia-search-wrapper
              .offset
            if:x:/@get-widget-property/*/*?value.int
              =:int:0

              /*
               * User has his inbox up, he has not filtered it, and he has not paged it, hence
               * we can automatically re-databind his inbox for him.
               */
              micro.evaluate.file:@SEPHIA/inbox/databind-inbox.hl

  .oncheck

    /*
     * Invoking lambda event responsible for checking if new emails have arrived, and taking
     * the necessary steps accordingly.
     */
    sephia._internals.check-emails

