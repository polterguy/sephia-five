

/*
 * Invoked when a file is to be downloaded.
 *
 * Pass in filename as [filename], in addition to [prefix] and [folder].
 */
_filename





/*
 * Making sure we do a lower comparison, when we look up MIME type in configuration file.
 */
set:x:/@_filename?value
  to-lower:x:/../*/filename?value





/*
 * Splitting [_filename] to figure out its extension.
 */
split:x:/@_filename?value
  =:.
load-file:@SEPHIA/configuration/legal-mime-types.hl





/*
 * Checking if MIME type has an explicit declaration, at which point we use that to
 * decorate our HTTP response object's HTTP headers collection.
 */
if:x:/@load-file/*/*/{0}
  :x:/@split/0/-?name

  /*
   * Supported file type, first adding MIME type, and possibly
   * a "Content-Transfer-Encoding" header, before we echo file to response.
   */
  _charset
  if:x:/@load-file/*/*/{0}
    :x:/@split/0/-?name
    =:text

    /*
     * Text type, adding charset to UTF8
     */
    set:x:/@_charset?value
      src:"; charset=utf-8"

  /*
   * Making sure we get the Content-Type header correct.
   */
  p5.web.header.set:Content-Type
    src:"{0}/{1}{2}"
      :x:/@load-file/*/*/{0}/*?name
        :x:/@split/0/-?name
      :x:/@load-file/*/*/{0}/*?value
        :x:/@split/0/-?name
      :x:/@_charset?value

  /*
   * Making sure we add all additional HTTP headers, which might include for
   * instance "Content-Transfer-Encoding", etc.
   */
  for-each:x:/@load-file/*/*/{0}/*/*
    :x:/@split/0/-?name
    p5.web.header.set:x:/@_dp/#?name
      src:x:/@_dp/#?value





/*
 * Setting Content-Disposition correctly.
 */
p5.web.header.set:Content-Disposition
  src:@"attachment; filename=""{0}"""
    :x:/../*/filename?value





/*
 * Echoing file to client.
 */
p5.web.echo-file:{0}{1}{2}
  :x:/../*/folder?value
  :x:/../*/prefix?value
  :x:/../*/filename?value
