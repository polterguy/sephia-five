
/*
 * Imports PGP key from email.
 */
button
  class:button-clear
  innerValue:@"<svg class=""sephia-icon""><use xlink:href=""{0}media/si-sprite.svg#si-evil-user""></use></svg>"
    :x:/@p5.io.unroll-path?value
  title:Import public PGP key(s) from email into GnuPG database
  oninit

    /*
     * Checking if there exists a PGP key in email, one way or another, and if so, making sure we make this button visible.
     * Otherwise, we make the button invisible.
     *
     * First finding email's database ID.
     */
    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
      _email-id
    p5.web.widgets.property.get:x:/@p5.web.widgets.find-first-ancestor/*/*?value
      _email-id

    /*
     * Then doing a lookup into database for attachments in email with the file extension of ".asc".
     */
    p5.mysql.connect:[sephia]
      p5.mysql.scalar:@"select count(*) from attachments where emailid = @emailid and filename like '%.asc' and exists (
select * from emails where id = @emailid and signature is not null)"
        @emailid:x:/@p5.web.widgets.property.get/*/*?value

      /*
       * Checking if there existed an attachment file with the extension of ".asc".
       */
      if:x:/@p5.mysql.scalar?value.int
        >:int:0

        /*
         * PGP keyfile found as attachment, making import PGP key button visible.
         */
        p5.web.widgets.property.set:x:/../*/_event?value
          visible:true
          _pgp-type:attachment
          _email-id:x:/@p5.web.widgets.property.get/*/*?value

      else

        /*
         * Checking if a PGP public key was embedded into email content (in 'plain' text type part).
         */
        p5.mysql.select:@"select content from parts where type = 'plain' and emailid = @emailid and exists (
select * from emails where id = @emailid and signature is not null) limit 1"
          @emailid:x:/@p5.web.widgets.property.get/*/*?value
        match:x:/@p5.mysql.select/*/*?value
          src:regex:"/-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----/s"
        if:x:/@match/*

          /*
           * Public PGP key found in email content.
           */
          p5.web.widgets.property.set:x:/../*/_event?value
            visible:true
            _pgp-type:content
            _email-id:x:/@p5.web.widgets.property.get/*/*?value
        else

          /*
           * Making button invisible.
           */
          p5.web.widgets.property.set:x:/../*/_event?value
            visible:false

  onclick

    /*
     * Finding PGP key and importing it.
     */
    p5.web.widgets.property.get:x:/../*/_event?value
      _email-id
      _pgp-type

    /*
     * Connecting to database and retrieving public PGP key(s).
     */
    _pgp-key-content
    p5.mysql.connect:[sephia]
      switch:x:/@p5.web.widgets.property.get/*/*/_pgp-type?value

        /*
         * PGP key(s) was found in content of email.
         */
        case:content
          p5.mysql.select:@"select content from parts where type = 'plain' and emailid = @emailid limit 1"
            @emailid:x:/@p5.web.widgets.property.get/*/*/_email-id?value
          match:x:/@p5.mysql.select/*/*?value
            src:regex:"/-----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----/s"
          for-each:x:/@match/*?name
            set:x:/@_pgp-key-content?value
              src:{0}\r\n{1}
                :x:/@_pgp-key-content?value
                :x:/@_dp?value

        /*
         * PGP key(s) was found as attachments to email.
         */
        case:attachment
          p5.mysql.select:@"select * from attachments where emailid = @emailid"
            @emailid:x:/@p5.web.widgets.property.get/*/*/_email-id?value
          for-each:x:/@p5.mysql.select/*
            load-file:{0}{1}{2}
              :x:/@_dp/#/*/folder?value
              :x:/@_dp/#/*/prefix?value
              :x:/@_dp/#/*/filename?value
            set:x:/@_pgp-key-content?value
              src:{0}\r\n\r\n{1}
                :x:/@_pgp-key-content?value
                :x:/@load-file/*?value.string

    /*
     * Importing public PGP key found in [_pgp-key-content] now, and supplying feedback to user.
     */
    gaiasoul.sephia.pgp.import.public-keyring-keys:x:/@_pgp-key-content?value
    sys42.windows.info-tip:{0} public PGP keys was imported into your GnuPG database.
      :x:/@gaiasoul.sephia.pgp.import.public-keyring-keys/*?count

    /*
     * TODO: Displaying PGP keys that were imported in a datagrid below email.
     * TODO: Allow automatically attaching PGP public keys from GnuPG database, when creating new/replying to email.
     */
