
/*
 * Databinds our inbox datagrid.
 *
 * Requires no arguments, but you can optionally pass in [offset] and [filter] when invoking file,
 * to start out at a specific page, with a specified filter condition.
 *
 * Filter can be "typed", by starting it out with a "type declaration", followed by a colon.
 * Legal types are 'inbox:', 'sent:', 'read:', 'unread:', 'safe:', 'all:', 'spam:' and 'attachment:'.
 *
 * If you do not provide a "type", the default type is "inbox:".
 */
.defaults
  offset:int:0
  filter:"inbox:"





/*
 * Sanity checking optional arguments.
 */
micro.lambda.contract.optional:x:/..
  offset:long
  filter:string





/*
 * Needed to parametrize SQL select queries.
 */
whoami





/*
 * Removing [filter] argument for simplicity's sake, if it was empty.
 *
 * If it is removed, the default filter will be used.
 */
if:x:/../*/filter?value
  not
  or:x:/../*/filter?value
    =:
  set:x:/../*/filter





/*
 * Parsing filter, such that we only search types of emails specified by caller.
 */
_filter-type
if
  fetch:x:/0/0?value
    index-of:x:(/../*/filter|/../*/.defaults/*/filter)/$?value
      src:":"

  /*
   * We have a "type declaration" for our filter criteria.
   *
   * Figuring out how to further massage our SQL.
   */
  split:x:(/../*/filter|/../*/.defaults/*/filter)/$?value
    =:":"
  switch:x:/@split/0?name
    case:inbox
      set:x:/@_filter-type?value
        src:@"and emails.type='received'"
    case:sent
      set:x:/@_filter-type?value
        src:@"and emails.type='sent'"
    case:unread
      set:x:/@_filter-type?value
        src:@"and emails.isread=0 and emails.type='received'"
    case:read
      set:x:/@_filter-type?value
        src:@"and emails.isread=1 and emails.type='received'"
    case:safe
      set:x:/@_filter-type?value
        src:@"and emails.encrypted != 0 and emails.fingerprint is not null"
    case:spam
      set:x:/@_filter-type?value
        src:@"and emails.type = 'spam'"
    case:attachment
      set:x:/@_filter-type?value
        src:@"and exists (select * from attachments where attachments.emailid = emails.id)"
    case:all
      set:x:/@_filter-type?value
        src:@""
    default
      micro.windows.info:I don't recognize your type declaration
        class:micro-windows-info warning
      set:x:/@_filter-type?value
        src:@"and emails.type='received'"

  /*
   * Checking if caller supplied a filter or only a type declaration.
   */
  if:x:/@split/*?count
    >:int:1

    /*
     * There was a filter, in addition to a type declaration.
     *
     * Since user might search for something containing a ":", we need to
     * join everything but the first [split] result.
     */
    join:x:/@split/*(!/./0)?name
      sep:":"
    set:x:(/../*/filter|/../*/.defaults/*/filter)/$?value
      src:x:/@join?value

  else

    /*
     * There was no filter, only a type declaration.
     */
    set:x:(/../*/filter|/../*/.defaults/*/filter)/$?value
      src:

else

  /*
   * Defaulting filter type to "inbox:".
   */
  set:x:/@_filter-type?value
    src:@"and emails.type='received'"





/*
 * Opening database and selecting top 10 emails, sorted descendingly by date.
 */
p5.mysql.connect:[sephia]

  /*
   * Selecting 10 newest emails.
   *
   * Notice, we do not order by date, since dates might sometimes be local, and/or slightly offsets.
   * Hence, we order our emails by "id" descendingly, which should always bring in the most recent email at the top.
   */
  p5.mysql.select:@"select emails.id, subject, date, encrypted, signature, emails.fingerprint, emails.status, isread, emails.type, contacts.email, contacts.name from emails 
inner join contacts on contacts.id = emails.sender 
where emails.username = @username and (subject like @filter or contacts.name like @filter or contacts.email like @filter 
or exists (select * from parts where content like @filter and parts.emailid = emails.id)
or exists (select * from attachments where filename like @filter and attachments.emailid = emails.id))
{0}
order by id desc limit 10 offset @offset"
    :x:/@_filter-type?value
    @username:x:/@whoami/*/username?value
    @offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value.int
    @filter:%{0}%
      :x:(/../*/filter|/../*/.defaults/*/filter)/$?value

  /*
   * Creating rows for our grid databind operation below.
   */
  for-each:x:/@p5.mysql.connect/*/p5.mysql.select/*

    /*
     * Creating CSS class of row according to status of currently iterated email.
     */
    _class
    if:x:/@_dp/#/*/type?value
      =:sent

      /*
       * This email was sent by currently logged in user.
       */
      set:x:/@_class?value
        src:{0} sephia-sent
          :x:/@_class?value

    if:x:/@_dp/#/*/isread?value.int
      =:int:0

      /*
       * This email is still unread.
       */
      set:x:/@_class?value
        src:{0} sephia-unread
          :x:/@_class?value

    if:x:/@_dp/#/*/encrypted?value.int
      =:int:1

      /*
       * This email was encrypted.
       */
      set:x:/@_class?value
        src:{0} sephia-encrypted
          :x:/@_class?value

    if:x:/@_dp/#/*/fingerprint?value
      and:x:/@_dp/#/*/fingerprint?value
        !=:

      /*
       * This email was cryptographically signed.
       */
      set:x:/@_class?value
        src:{0} sephia-signed
          :x:/@_class?value

    /*
     * Nicely formatting the date.
     */
    p5.types.date.format:x:/@_dp/#/*/date?value
      format:"d. MMM yyyy - HH:mm"

    /*
     * Cleaning up our CSS class declaration for email row.
     */
    set:x:/@_class?value
      trim:x:/@_class?value

    /*
     * Checking if email has attachments.
     */
    p5.mysql.scalar:@"select count(*) from attachments where emailid = @id and filename != 'signature.pgp'"
      @id:x:/@_dp/#/*/id?value
    if:x:/@p5.mysql.scalar?value.int
      >:int:0

      /*
       * Email contains attachments.
       */
      add:x:/..for-each/*/add/**/Date/*/widgets
        src
          literal
            element:span
            class:icon-paperclip

    /*
     * Making sure we add the correct "face" to email.
     */
    switch:x:/@_dp/#/*/status?value.int
      case:int:0
        add:x:/..for-each/*/add/**/Subject/*/widgets/*/div/*/widgets
          src
            literal
              element:span
              class:icon-smile-o

      case:int:1
        add:x:/..for-each/*/add/**/Subject/*/widgets/*/div/*/widgets
          src
            literal
              element:span
              class:icon-meh-o

      case:int:2
        add:x:/..for-each/*/add/**/Subject/*/widgets/*/div/*/widgets
          src
            literal
              element:span
              class:icon-frown-o

    /*
     * Forward evaluating arguments, and creating our row.
     */
    eval-x:x:/+/*/*/*(/Name|/.row(/*/*/*/id|/*))|/+/*/*/*(/Subject|/Date)/**
    add:x:/../*/micro.widgets.grid.databind
      src
        item
          .row
            class:x:/@_class?value
            .row-email-id:x:/@_dp/#/*/id?value
            onclick

              /*
               * Executing file responsible for reading a single email.
               */
              eval-x:x:/+/*
              micro.evaluate.file:@SEPHIA/inbox/read-email.hl
                id:x:/@_dp/#/*/id?value

          Name:x:/@_dp/#/*/name?value
          Subject
            widgets
              div
                class:sephia-status
                widgets
              span
                innerValue:x:/@_dp/#/*/subject?value
          Date
            widgets
              span
                innerValue:x:/@p5.types.date.format?value
          Delete
            widgets
              button
                innerValue:@"<span class=""icon-trash""></span>"
                onclick

                  /*
                   * Retrieving email ID and deleting it from database, 
                   * and re-databinding inbox.
                   */
                  p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                    .row-email-id
                  get-widget-property:x:/-/*/*?value
                    .row-email-id
                  p5.mysql.connect:[sephia]
                    p5.mysql.delete:@"delete from emails where id = @id"
                      @id:x:/@get-widget-property/*/*?value

                  /*
                   * Databinding inbox again.
                   */
                  sephia.inbox.databind
                    keep-page-filter:bool:true

                  /*
                   * Updating page title.
                   */
                  sephia._internals.update-page-title





/*
 * Before we databind grid, we check to see if there were any items actually
 * retrieved, and if not, we simply remove invocation to databinding of grid,
 * to avoid having grid cleared.
 */
if:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*
  not

  /*
   * Removing databind invocation, unless [force] was given.
   */
  if:x:/../*/force?value
    not
    set:x:/../*/micro.widgets.grid.databind

  /*
   * Giving user a visual clue of that we're at end of dataset.
   */
  set-widget-property:sephia-end-of-dataset
    visible:true

else

  /*
   * Removing any potential visual clues signaling that we're at the end of our dataset.
   */
  set-widget-property:sephia-end-of-dataset
    visible:false





/*
 * Checking if we've got less than 10 records in our dataset, at which point we're
 * atthe end of our dataset, and need to give user a visual clue.
 */
if:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*?count
  <:int:10

  /*
   * Giving user a visual clue of that we're at end of dataset.
   */
  set-widget-property:sephia-end-of-dataset
    visible:true





/*
 * Databinding grid.
 */
micro.widgets.grid.databind:sephia-inbox





/*
 * Making sure we had any results, and returning accordingly to caller.
 */
if:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*

  /*
   * Returning true to signal that we actually had items, and were
   * able to re-databind grid.
   */
  return:bool:true

else

  /*
   * Returning false, since there were no items matching criteria.
   */
  return:bool:false
