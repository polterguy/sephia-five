
/*
 * Action button for replying to email
 */
button
  innerValue:@"<span class=""icon-mail-reply""></span>"
  title:Reply to email
  style:"margin-bottom:0;"
  oninit

    /*
     * Figuring out ID of email we're reading, to make sure we hide this button, in case the
     * email was sent by the user himself (in "outbox" that is).
     */
    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
      .email-id
    get-widget-property:x:/-/*/*?value
      .email-id

    /*
     * Selecting email data from MySQL.
     */
    p5.mysql.connect:[sephia]

      /*
       * Checking if email was sent by user.
       */
      p5.mysql.scalar:@"select type from emails where emails.id = @id"
        @id:x:/@get-widget-property/*/*?value
      if:x:/@p5.mysql.scalar?value
        =:sent

        /*
         * This email was sent by user himself, and hence replying to it makes no sense.
         */
        set-widget-property:x:/../*/_event?value
          visible:false

  onclick

    /*
     * Finding currently read email, to make sure we're able to inject
     * reply widget into page just beneath reader widget, before we delete
     * the reader widget itself.
     */
    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
      .email-id
    get-widget-property:x:/-/*/*?value
      .email-id

    /*
     * Getting "reply data" for email.
     */
    sephia._internals.get-reply-data:x:/@get-widget-property/*/*?value

    /*
     * Adding explicit babelsubject to composer widget, if it exists.
     */
    if:x:/@sephia._internals.get-reply-data/*/babelsubject?value
      eval-x:x:/+/*/*
      add:x:/../**/sephia.widgets.compose-email
        src
          babelsubject:x:/@sephia._internals.get-reply-data/*/babelsubject?value

    /*
     * Adding "To" recipient.
     */
    add:x:/+/*
      src:x:/@sephia._internals.get-reply-data/*/to
    add:x:/../*/create-widget/**/sephia.widgets.compose-email/*/recipients
      src

    /*
     * Creating actual reply widget.
     */
    eval-x:x:/+/**/sephia.widgets.compose-email(/*|/*/headers/*)
    create-widget
      after:x:/@p5.web.widgets.find-first-ancestor/*/*?value
      class:row air-top
      .email-id:x:/@get-widget-property/*/*?value
      widgets
        div
          class:col
          widgets

            /*
             * This is the actual "composer" widget, which allows user to compose/reply/etc an email.
             */
            sephia.widgets.compose-email
              markdown-composer:bool:true
              subject:x:/@sephia._internals.get-reply-data/*/subject?value
              body:x:/@sephia._internals.get-reply-data/*/content?value
              recipients
              class:air-inner shaded rounded
              headers
                In-Reply-To:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/mimeid?value
              .onclose

                /*
                 * Simply deleting main wrapper widget.
                 */
                p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                  .email-id
                delete-widget:x:/-/*/*?value

              .onsend

                /*
                 * Notifying user.
                 */
                micro.windows.info:Email was successfully sent

    /*
     * Deleting reader widget.
     */
    delete-widget:x:/@p5.web.widgets.find-first-ancestor/*/*?value
