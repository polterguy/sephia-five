
/*
 * Reads a single email.
 *
 * Expects [id] being email id to read.
 * Optionally, pass in [after], being a widget ID of another email being currently read, at
 * which this email's reader widget will be injected just afterwards in the DOM hierarchy.
 * Otherwise, email will be opened up at the 'bottom' of screen.
 */





/*
 * Sanity checking invocation.
 */
micro.lambda.contract.min:x:/..
  id:long





/*
 * Sanity checking optional arguments.
 */
micro.lambda.contract.optional:x:/..
  after:string





/*
 * Checking if email is already opened in another widget.
 */
p5.web.widgets.find:sephia-main-container
  .email-id:x:/../*/id?value
if:x:/-/*/*?value

  /*
   * Another widget is already showing this email, returning early.
   */
  micro.windows.info:This email is already open
  return





/*
 * Opens database and selects data for email.
 */
p5.mysql.connect:[sephia]

  /*
   * Fetching attachments for email, and appending as buttons to email reader, which once
   * clicked will download the attachment.
   */
  p5.mysql.select:@"select * from attachments where emailid = @id"
    @id:x:/../*/id?value
  for-each:x:/@p5.mysql.select/*

    /*
     * Checking if this is a legal attachment.
     */
    eval-x:x:/+/*
    sephia._internals.mime.get-type-from-file-extension
      filename:x:/@_dp/#/*/filename?value
      prefix:x:/@_dp/#/*/prefix?value
      folder:x:/@_dp/#/*/folder?value
    if:x:/@sephia._internals.mime.get-type-from-file-extension/*

      /*
       * Attachment has a legal file extension according to configurtion of Sephia.
       * Adding [onclick] event handler for button, that will download attachment when clicked.
       */
      add:x:/..for-each/*/add/*/src/*/button
        src
          class:sephia-inbox-attachment
          onclick

            /*
             * Setting session variable to filename, and reloading location.
             * The launch.hl file will check for this session variable, and if found, instead
             * of reloading page, it will serve up the file requested.
             */
            get-widget-property:x:/../*/_event?value
              .folder
              .prefix
              .filename
            eval-x:x:/+/*/*/*
            p5.web.session.set:sephia.core.file-download
              src
                file
                  folder:x:/@get-widget-property/*/*/.folder?value
                  prefix:x:/@get-widget-property/*/*/.prefix?value
                  filename:x:/@get-widget-property/*/*/.filename?value
            p5.web.reload-location

    else

      /*
       * Attachment does not have a legal file extension.
       *
       * Warning user, before we allow him to download the file.
       */
      add:x:/..for-each/*/add/*/src/*/button
        src
          class:sephia-inbox-attachment sephia-inbox-illegal-attachment
          onclick

            /*
             * Displaying an information bubble, warning user about that file is not considered
             * safe, asking him if he is really sure he wants to download the file.
             */
            eval-x:x:/+/**/_widget
            micro.windows.info:These files are not considered safe, are you sure you wish to download it?
              class:micro-windows-info micro-windows-info-error
              widgets
                button
                  innerValue:Yes
                  style:"margin-bottom:0;margin-left:15px;"
                  onclick

                    /*
                     * Forward evaluated above.
                     */
                    _widget:x:/../*/_event?value

                    /*
                     * Downloading file anyway.
                     */
                    get-widget-property:x:/../*/_widget?value
                      .folder
                      .prefix
                      .filename
                    eval-x:x:/+/*/*/*
                    p5.web.session.set:sephia.core.file-download
                      src
                        file
                          folder:x:/@get-widget-property/*/*/.folder?value
                          prefix:x:/@get-widget-property/*/*/.prefix?value
                          filename:x:/@get-widget-property/*/*/.filename?value
                    p5.web.reload-location
                

    /*
     * Adding button to reader for currently iterated attachment.
     */
    eval-x:x:/+/*/*/*
    add:x:/../*/create-widget/**/widgets/=attachments
      src
        button
          .folder::x:/@_dp/#/*/folder?value
          .prefix::x:/@_dp/#/*/prefix?value
          .filename::x:/@_dp/#/*/filename?value
          innerValue:x:/@_dp/#/*/filename?value

  /*
   * Fetching all recipients for email.
   */
  p5.mysql.select:@"select name, email, type from contacts 
inner join recipients on contacts.id = recipients.contactid
where recipients.emailid = @id"
    @id:x:/../*/id?value
  _to
  _cc
  _bcc

  /*
   * Creating recipients list, and putting into adequate node above.
   * This becomes a comma separated string for each of the above recipient types.
   */
  for-each:x:/@p5.mysql.select/*/*/type/=To/.
    set:x:/@_to?value
      src:{0}, {1} &lt;{2}&gt;
        :x:/@_to?value
        :x:/@_dp/#/*/name?value
        :x:/@_dp/#/*/email?value
  set:x:/@_to?value
    trim:x:/@_to?value
      chars:" ,"
  for-each:x:/@p5.mysql.select/*/*/type/=Cc/.
    set:x:/@_cc?value
      src:{0}, {1} &lt;{2}&gt;
        :x:/@_cc?value
        :x:/@_dp/#/*/name?value
        :x:/@_dp/#/*/email?value
  set:x:/@_cc?value
    trim:x:/@_cc?value
      chars:" ,"
  for-each:x:/@p5.mysql.select/*/*/type/=Bcc/.
    set:x:/@_bcc?value
      src:{0}, {1} &lt;{2}&gt;
        :x:/@_bcc?value
        :x:/@_dp/#/*/name?value
        :x:/@_dp/#/*/email?value
  set:x:/@_bcc?value
    trim:x:/@_bcc?value
      chars:" ,"

  /*
   * Retrieving actual email.
   */
  p5.mysql.select:@"select emails.id, subject, date, signature, emails.fingerprint, encrypted, type, mimeid, name, email from emails 
inner join contacts on emails.sender = contacts.id 
where emails.id = @id"
    @id:x:/../*/id?value

  /*
   * This part will contain the background color of the reader, which
   * depends upon whether or not the email was encrypted or not.
   */
  _bg
  if:x:/@p5.mysql.select/*/*/encrypted?value.int
    !=:int:0
    and:x:/@p5.mysql.select/*/*/signature?value

    /*
     * Email was both encrypted and signed.
     */
    set:x:/@_bg?value
      src:success

  else

    /*
     * Email was either not encrypted or not signed.
     */
    set:x:/@_bg?value
      src:warning

  /*
   * This part will contain some of the "meta content" for email, more specifically who sent the email.
   */
  _meta1
  set:x:/@_meta1?value
    src:"From: {0} &lt;{1}&gt;"
      :x:/@p5.mysql.select/*/*/name?value
      :x:/@p5.mysql.select/*/*/email?value

  /*
   * This part will contain some more of the "meta content" for email, more specifically when it was sent.
   */
  _meta2
  p5.types.date.format:x:/@p5.mysql.select/*/*/date?value
    format:"dddd, d. MMMM yyyy, HH:mm"
  set:x:/@_meta2?value
    src:"Sent: {0}"
      :x:/@p5.types.date.format?value

  /*
   * This part will contain some more of the "meta content" for email, more specifically if email was sent encrypted.
   */
  _meta3
  if:x:/@p5.mysql.select/*/*/encrypted?value.int
    !=:int:0

    /*
     * Email was sent encrypted.
     */
    set:x:/@_meta3?value
      src:Email was sent encrypted

  else

    /*
     * Email was not encrypted
     */
    set:x:/@_meta3?value
      src:Email was not encrypted

  /*
   * This part will contain some more of the "meta content" for email, more specifically if email was cryptographically signed.
   */
  _meta4
  if:x:/@p5.mysql.select/*/*/signature?value

    /*
     * Email was cryptographically signed, making sure we HTML encode the signature User ID.
     */
    p5.html.html-encode:x:/@p5.mysql.select/*/*/signature?value
    set:x:/@_meta4?value
      src:"Signed by: {0} - {1}"
        :x:/@p5.html.html-encode?value
        :x:/@p5.mysql.select/*/*/fingerprint?value

  else

    /*
     * Email was not cryptographically signed
     */
    set:x:/@_meta4?value
      src:Email was not cryptographically signed

  /*
   * This part will contain some more of the "meta content" for email, more specifically its MIME ID.
   */
  _meta5
  set:x:/@_meta5?value
    src:"Message ID: {0}"
      :x:/@p5.mysql.select/*/*/mimeid?value

  /*
   * This part will contain all recipients of the email.
   */
  _meta6:@"Recipients: <ul style=""color:rgba(0,0,0,.3)"">"
  p5.mysql.select:@"select contacts.name, contacts.email, recipients.type from recipients inner join contacts on contacts.id = recipients.contactid where recipients.emailid = @id"
    @id:x:/../*/id?value
  for-each:x:/@p5.mysql.select/*
    set:x:/@_meta6?value
      src:"{0}<li>{3} - {1} &lt;{2}&gt;</li>"
        :x:/@_meta6?value
        :x:/@_dp/#/*/name?value
        :x:/@_dp/#/*/email?value
        :x:/@_dp/#/*/type?value
  set:x:/@_meta6?value
    src:{0}</ul>
      :x:/@_meta6?value

  /*
   * Selecting content of email.
   */
  p5.mysql.select:@"select * from parts where emailid = @id"
    @id:x:/../*/id?value

  /*
   * Adding all views that exists into [sephia._internals.widgets.email-body]
   */
  add:x:/../*/create-widget/**/sephia._internals.widgets.email-body
    src:x:/@p5.mysql.select/*

  /*
   * Making sure we set email as read in database.
   */
  p5.mysql.update:@"update emails set isread = 1 where id = @id"
    @id:x:/../*/id?value


/*
 * Loading all action buttons.
 */
list-files:@SEPHIA/inbox/read-email-action-buttons/
  filter:.hl
load-file:x:/-/*?name
add:x:/../*/create-widget/**/widgets/=action-strip
  src:x:/@load-file/*/*


/*
 * Making sure email is displayed as read in grid.
 */
p5.web.widgets.find-like:sephia-main-container
  .row-email-id:x:/../*/id?value
get-widget-property:x:/-/*/*?value
  class
if:x:/-/*/*?value
  ~:sephia-unread
  micro.css.toggle:x:/@p5.web.widgets.find-like/*/*?value
    class:sephia-unread


/*
 * Checking if we had an [after] argument.
 */
if:x:/../*/after?value
  add:x:/../*/create-widget
    src:x:/../*/after
else
  add:x:/../*/create-widget
    src
      parent:sephia-main-container


/*
 * Creates actual widget showing email.
 */
create-widget
  class:row air-top
  .email-id:x:/../*/id?value
  widgets
    div
      class:col-100 sephia-email-reader
      widgets
        div
          class:air-inner {0} shaded rounded
            :x:/@p5.mysql.connect/*/_bg?value
          oninit

            /*
             * Making sure we scroll reader into view.
             */
            p5.web.send-javascript:@"p5.$('{0}').el.scrollIntoView(true);"
              :x:/../*/_event?value

          widgets:content

            /*
             * Displays header of email.
             */
            h3
              innerValue:x:/@p5.mysql.connect/*/p5.mysql.select/[2,3]/*/*/subject?value

            /*
             * Displays body of email.
             */
            sephia._internals.widgets.email-body

            /*
             * Displays attachments of email.
             */
            container
              class:sephia-inbox-attachments
              widgets:attachments

            /*
             * Container wrapping "meta data" of email.
             *
             * This parts is initially shown invisible, and only displayed when user clicks the action button
             * that explicitly says he wants to see these parts.
             */
            container
              visible:false
              .meta-data
              widgets

                /*
                 * A simple separator between the email content, and its meta data.
                 */
                hr
                  style:"margin-top:1rem;"

                /*
                 * Displays email "meta data", more specifically who sent the email.
                 */
                p
                  style:"color:rgba(0,0,0,.3);font-style:italic;margin-bottom:0;"
                  innerValue:x:/@p5.mysql.connect/*/_meta1?value

                /*
                 * Displays additional "meta data" about email, more specifically the date email was sent.
                 */
                p
                  style:"color:rgba(0,0,0,.3);font-style:italic;margin-bottom:0;"
                  innerValue:x:/@p5.mysql.connect/*/_meta2?value

                /*
                 * Displays additional "meta data" about email, more specifically if email was sent encrypted.
                 */
                p
                  style:"color:rgba(0,0,0,.3);font-style:italic;margin-bottom:0;"
                  innerValue:x:/@p5.mysql.connect/*/_meta3?value

                /*
                 * Displays additional "meta data" about email, more specifically if email was cryptographically signed.
                 */
                p
                  style:"color:rgba(0,0,0,.3);font-style:italic;margin-bottom:0;"
                  innerValue:x:/@p5.mysql.connect/*/_meta4?value

                /*
                 * Displays additional "meta data" about email, more specifically its MIME ID.
                 */
                p
                  style:"color:rgba(0,0,0,.3);font-style:italic;margin-bottom:0;"
                  innerValue:x:/@p5.mysql.connect/*/_meta5?value

                /*
                 * Displays additional "meta data" about email, more specifically all recipients.
                 */
                p
                  style:"color:rgba(0,0,0,.3);font-style:italic;"
                  class:air-top
                  innerValue:x:/@p5.mysql.connect/*/_meta6?value

                /*
                 * Displays additional "meta data" about email, more specifically "In-Reply-To" parts.
                 */
                p
                  style:"color:rgba(0,0,0,.3);"
                  class:air-top
                  .id:x:/@p5.mysql.connect/*/p5.mysql.select/[2,3]/*/*/id?value
                  oninit

                    /*
                     * Checking if email was a reply to some other message, and if not, hiding widget.
                     */
                    get-widget-property:x:/../*/_event?value
                      .id
                    p5.mysql.connect:[sephia]
                      p5.mysql.select:@"select type, inreplyto from emails where id = @id"
                        @id:x:/@get-widget-property/*/*?value
                      if:x:/@p5.mysql.select/*?count
                        =:int:0

                        /*
                         * Email was not a reply.
                         * Hiding widget and returning early.
                         */
                        set-widget-property:x:/../*/_event?value
                          visible:false
                        return

                      /*
                       * Now checking 'type' of currently read email, and if it is 'sent', 
                       * we're looking for a 'received' email with the given 'inreplyto' MIME id.
                       * Otherwise we're looking for a 'sent' email with the given 'inreplyto' MIME id.
                       * Defaulting to 'sent'.
                       */
                      _type:sent
                      if:x:/@p5.mysql.select/*/*/type?value
                        =:sent
                        set:x:/@_type?value
                          src:received

                      /*
                       * Now fetching given email from database with the specified MIME id of 'inreplyto'.
                       *
                       * Notice, since email in theory could have been sent to multiple recipents in the same 
                       * MySQL database (sharing the same Sephia installation) - We need to parametrize SQL with username.
                       */
                      whoami
                      p5.mysql.select:@"select id from emails where mimeid = @mimeid and username = @username"
                        @mimeid:x:/./@p5.mysql.select/*/*/inreplyto?value
                        @username:x:/@whoami/*/username?value

                      /*
                       * Verifying we actually have this email, and if not, simply hiding widget.
                       */
                      if:x:/@p5.mysql.select/*?count.int
                        =:int:0

                        /*
                         * We don't have this email in our database.
                         * Hiding widget and returning early.
                         */
                        set-widget-property:x:/../*/_event?value
                          visible:false
                        return

                      /*
                       * Finding link button, and setting its [.id] property to inreplyto's database ID.
                       */
                      p5.web.widgets.find:x:/../*/_event?value
                        .id-link
                      set-widget-property:x:/-/*/*?value
                        .id-link:x:/@p5.mysql.select/*/*/id?value

                  widgets
                    span
                      innerValue:"Email was a reply to the "
                    a
                      href:#
                      .id-link
                      role:button
                      innerValue:following email
                      onclick

                        /*
                         * Retrieving ID of email, and opening up, such that it is opened just beneath currently read email.
                         */
                        p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                          .email-id
                        get-widget-property:x:/../*/_event?value
                          .id-link
                        load-file:@SEPHIA/inbox/read-email.hl
                        eval-x:x:/+/*
                        eval:x:/-2/*
                          id:x:/@get-widget-property/*/*?value
                          after:x:/@p5.web.widgets.find-first-ancestor/*/*?value

            /*
             * "Action strip" containing all buttons for actions user can do with email, such as "Reply", "Forward", "Delete", etc.
             */
            div
              class:right
              widgets
                div
                  class:strip
                  style:"display:inline-block;"
                  widgets:action-strip





/*
 * Updating page title, since we now (probably) have read one more email.
 */
load-file:@SEPHIA/inbox/update-page-title.hl
eval:x:/-/*
