/*
 * File responsible for starting Sephia Five, which means creating the main widget, 
 * and wire frame for displaying inbox, starting POP3 worker thread, etc.
 *
 * Notice, it will first force the user to setup his POP3 and SMTP settings, unless
 * he has already done so.
 */





/*
 * Checking if user is attempting to download a file, such as an attachment etc.
 *
 * When the user tries to download an attachment, the attachment he tries to download,
 * will be stored in a session variable, and the page will be reloaded.
 * This will ensure that the file is downloaded, while the user stays in his current URL.
 *
 * Here we check for that session variable, and if it exist, we simply serve that file,
 * for then to delete the session variable.
 */
p5.web.session.get:sephia.core.file-download
if:x:/@p5.web.session.get/*/*/*/filename?value

  /*
   * User has requested to download a file.
   */
  eval-x:x:/+/*
  micro.evaluate.file:@SEPHIA/inbox/download-file.hl
    filename:x:/@p5.web.session.get/*/*/*/filename?value
    folder:x:/@p5.web.session.get/*/*/*/folder?value
    prefix:x:/@p5.web.session.get/*/*/*/prefix?value

  /*
   * Clearing our session variable.
   */
  p5.web.session.set:sephia.core.file-download

  /*
   * Returning early to avoid evaluating the rest of the file.
   */
  return





/*
 * Creating main content container.
 *
 * This is the place where "everything" is stored in Sephia, and is used to display
 * the inbox, Sephia's settings, emails the user is reading, etc, etc, etc.
 *
 * Notice, we only use one "container" widget from Micro for everything related to Sephia.
 */
create-container-widget:sephia-main-container
  class:container





/*
 * Including Micro, and adding Awesome Fonts.
 */
p5.web.include-css-file
  @MICRO/media/micro.css
  @MICRO/media/fonts.css





/*
 * Making sure user has an attachment folder.
 *
 * The first time the user opens Sephia, it will automatically create the user's
 * attachment folder, in addition to a temporary folder, where uploaded attachments will
 * be temporary stored, before an email is sent.
 *
 * Every time the user refresh Sephia's page, this temporary attachment folder will be emptied.
 */
micro.evaluate.file:@SEPHIA/init-user/ensure-user-attachment-folder.hl




/*
 * Making sure we delete all file in temporary attachment folder.
 */
list-files:@SEPHIA-USER-ATTACHMENTS/tmp/
delete-file:x:/-/*?name





/*
 * Retrieving user's settings, and making sure user has setup his account(s).
 *
 * Notice, if user hasn't setup his account(s), we won't allow him to open his inbox,
 * but force him to go through his settings, such as POP3, SMTP, PGP settings, etc.
 */
p5.auth.my-settings.get
if:x:/@p5.auth.my-settings.get/*/sephia
  not

  /*
   * User has no settings, displaying settings form, and returning early.
   *
   * First making sure we include the necessary default CSS skine files.
   * By default, Sephia Five uses the "serious" skin.
   */
  p5.web.include-css-file:@MICRO/media/skins/serious.css
  p5.web.include-css-file:@SEPHIA/media/main.css

  /*
   * Then creating our settings widget, before we return early.
   */
  create-widget
    parent:sephia-main-container
    widgets
      div
        class:row air-top
        widgets
          div
            class:col-100
            widgets
              div
                class:right
                widgets
                  div
                    class:strip toolbar
                    style:"display:inline-block;"
                    widgets
                      button
                        innerValue:@"<span class=""icon-home3""></span>"
                        onclick

                          /*
                           * Changing root URL of client to main root URL.
                           */
                          p5.web.get-root-location
                          p5.web.set-location:x:/-?value

          div
            class:col-100
            style:"margin-top:-36px;"
            widgets
              sephia._internals.widgets.settings
                wizard-mode:true

  /*
   * Returning early to avoid evaluating the rest of this file.
   */
  return





/*
 * Including the Micro skin user has selected in his settings.
 */
p5.web.include-css-file:@MICRO/media/skins/{0}.css
  :x:/@p5.auth.my-settings.get/*/sephia/*/skin?value





/*
 * Including main CSS file for Sephia.
 *
 * Notice, this is done after all other CSS files are included, to make sure we
 * can override anything we wish in Sephia's main CSS file.
 */
p5.web.include-css-file:@SEPHIA/media/main.css





/*
 * Ensuring user has his "welcome email(s) and contact(s)".
 */
micro.evaluate.file:@SEPHIA/init-user/ensure-initial-welcome-emails-and-contacts.hl





/*
 * Making sure we start email fetching thread.
 *
 * This will by default create a thread for each user, that runs in the background,
 * and constantly pulls new emails from the user's POP3 server.
 *
 * Alternatively, it will check if user is allowed to fetch his emails, and if not,
 * return boolean "false".
 */
sephia._internals.create-pop3-user-thread





/*
 * Creating inbox widget.
 */
micro.evaluate.file:@SEPHIA/inbox/create-inbox.hl





/*
 * Creates widget that constantly polls server every n'th second to
 * check if new emails have arrived.
 */
micro.evaluate.file:@SEPHIA/inbox/create-client-server-poller.hl
