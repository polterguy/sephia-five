
/*
 * Creates our "send email" event.
 *
 * Requires [subject], [body], [to] and optionally [cc] and [bcc], which all should be a comma separated list of emails.
 * Optionally pass in [attachments] as collections of attachments to send with email.
 */
create-event:sephia.send-email

  /*
   * Retrieving settings for currently logged in user.
   */
  whoami
  p5.auth.my-settings.get

  /*
   * Parametrizing SMTP invocation.
   * First "To" field.
   */
  split:x:/../*/to?value
    =:,
    =:" "
  add:x:/../*/p5.smtp.send/*/*/To
    src:x:/@split/*?name

  /*
   * Then "Cc" field.
   */
  split:x:/../*/cc?value
    =:,
    =:" "
  add:x:/../*/p5.smtp.send/*/*/Cc
    src:x:/@split/*?name

  /*
   * Then "Bcc" field.
   */
  split:x:/../*/bcc?value
    =:,
    =:" "
  add:x:/../*/p5.smtp.send/*/*/Bcc
    src:x:/@split/*?name

  /*
   * Looping through each "To", "Cc" and "Bcc" field in SMTP invocation,
   * and making sure we add the name from database as recipient, in addition to
   * moving the email address into the value of node.
   */
  p5.mysql.connect:[sephia]
    for-each:x:/../*/p5.smtp.send/*/*(/To|/Cc|/Bcc)/*
      p5.mysql.select:@"select name from contacts where username = @username and email = @email limit 1"
        @username:x:/@whoami/*/username?value
        @email:x:/@_dp/#?name
      set:x:/@_dp/#?value
        src:x:/@_dp/#?name
      set:x:/@_dp/#?name
        src:x:/@p5.mysql.select/*/*/name?value

  /*
   * Then "Sender".
   */
  add:x:/../*/p5.smtp.send/*/*/Sender
    src:@"{0}:{1}"
      :x:/@p5.auth.my-settings.get/*/sephia/*/name?value
      :x:/@p5.auth.my-settings.get/*/sephia/*/email?value

  /*
   * Then attachments.
   */
  for-each:x:/../*/attachments/*

    /*
     * Figuring out MIME type for file.
     */
    sephia.get-mime-type:x:/@_dp/#?value

    /*
     * Adding file as returned from above invocation.
     * Notice, if file is unsupported, nothing will be returned from above invocation.
     * And hence, file will not be attached in email.
     */
    add:x:/../*/p5.smtp.send/*/*/*/multipart/=mixed
      src:x:/@sephia.get-mime-type/*

  /*
   * Cleaning up arguments (removing unused To, Cc, Bcc fields, among other things).
   */
  set:x:/../*/p5.smtp.send/*/*(/Cc|/Bcc)(!/*/.)
  eval-x:x:/../*/p5.smtp.send(/*|/*/*/Subject|/*/*/*/*/*/content)

  /*
   * Adding cryptography keys for all recipients.
   * But only if we have cryptography keys for all recipients.
   */
  p5.crypto.list-public-keys:x:/../*/p5.smtp.send/*/*(/To|/Cc|/Bcc)/*?value
  if:x:/@p5.crypto.list-public-keys/*?count
    =:x:/../*/p5.smtp.send/*/*(/To|/Cc|/Bcc)/*?count

    /*
     * We've got cryptography keys for all recipients.
     */
    add:x:/../*/p5.smtp.send/*/*/*/multipart
      src:encrypt
    for-each:x:/../*/p5.smtp.send/*/*(/To|/Cc|/Bcc)/*
      eval-x:x:/+/*/*
      add:x:/../*/p5.smtp.send/*/*/*/multipart/*/encrypt
        src
          email:x:/@_dp/#?value

  /*
   * Sending email.
   */
  p5.smtp.send
    server:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-server?value
    port:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-port?value
    ssl:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-ssl?value
    username:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-username?value
    password:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-password?value
    envelope
      Subject:x:/../*/subject?value
      Sender
      To
      Cc
      Bcc
      body
        multipart:mixed
          text:plain
            content:x:/../*/body?value
