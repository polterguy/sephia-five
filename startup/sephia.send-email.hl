
/*
 * Creates our "send email" event.
 *
 * Requires [subject], [body], [to] and optionally [cc] and [bcc], which all should be a comma separated list of emails.
 * Optionally pass in [attachments] as collections of attachments to send with email.
 */
create-event:sephia.send-email

  /*
   * Retrieving settings for currently logged in user.
   */
  whoami
  p5.auth.my-settings.get

  /*
   * Parametrizing SMTP invocation.
   * First "To" field.
   */
  split:x:/../*/to?value
    =:,
    =:" "
  add:x:/../*/p5.smtp.send/*/*/To
    src:x:/@split/*?name

  /*
   * Then "Cc" field.
   */
  split:x:/../*/cc?value
    =:,
    =:" "
  add:x:/../*/p5.smtp.send/*/*/Cc
    src:x:/@split/*?name

  /*
   * Then "Bcc" field.
   */
  split:x:/../*/bcc?value
    =:,
    =:" "
  add:x:/../*/p5.smtp.send/*/*/Bcc
    src:x:/@split/*?name

  /*
   * Looping through each "To", "Cc" and "Bcc" field in SMTP invocation,
   * and making sure we add the name from database as recipient, in addition to
   * moving the email address into the value of node.
   */
  p5.mysql.connect:[sephia]
    for-each:x:/../*/p5.smtp.send/*/*(/To|/Cc|/Bcc)/*
      p5.mysql.select:@"select name from contacts where username = @username and email = @email limit 1"
        @username:x:/@whoami/*/username?value
        @email:x:/@_dp/#?name
      set:x:/@_dp/#?value
        src:x:/@_dp/#?name
      set:x:/@_dp/#?name
        src:x:/@p5.mysql.select/*/*/name?value

  /*
   * Then "Sender".
   */
  add:x:/../*/p5.smtp.send/*/*/Sender
    src:@"{0}:{1}"
      :x:/@p5.auth.my-settings.get/*/sephia/*/name?value
      :x:/@p5.auth.my-settings.get/*/sephia/*/email?value

  /*
   * Then attachments.
   */
  for-each:x:/../*/attachments/*

    /*
     * Figuring out MIME type for file.
     */
    sephia.get-mime-type:x:/@_dp/#?value

    /*
     * Adding file as returned from above invocation.
     * Notice, if file is unsupported, nothing will be returned from above invocation.
     * And hence, file will not be attached in email.
     */
    add:x:/../*/p5.smtp.send/*/*/*/multipart/=mixed
      src:x:/@sephia.get-mime-type/*

  /*
   * Cleaning up arguments (removing unused To, Cc, Bcc fields, among other things).
   */
  set:x:/../*/p5.smtp.send/*/*(/Cc|/Bcc)(!/*/.)
  eval-x:x:/../*/p5.smtp.send(/*|/*/*/Subject|/*/*/*/*/*/content)

  /*
   * Adding cryptography keys for all recipients.
   * But only if we have cryptography keys for all recipients.
   */
  p5.crypto.list-public-keys:x:/../*/p5.smtp.send/*/*(/To|/Cc|/Bcc)/*?value
  if:x:/@p5.crypto.list-public-keys/*?count
    =:x:/../*/p5.smtp.send/*/*(/To|/Cc|/Bcc)/*?count

    /*
     * We've got cryptography keys for all recipients.
     */
    add:x:/../*/p5.smtp.send/*/*/*/multipart
      src:encrypt
    for-each:x:/../*/p5.smtp.send/*/*(/To|/Cc|/Bcc)/*
      eval-x:x:/+/*/*
      add:x:/../*/p5.smtp.send/*/*/*/multipart/*/encrypt
        src
          email:x:/@_dp/#?value

  /*
   * Forward evaluating entire SMTP invocation
   */
  eval-x:x:/../*/p5.smtp.send/**

  /*
   * Saves entire outgoing [envelope] to database.
   */
  add:x:/../*/sephia.send-email._save-envelope
    src:x:/../*/p5.smtp.send/*/envelope
  sephia.send-email._save-envelope

  /*
   * Sending email.
   */
  p5.smtp.send
    server:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-server?value
    port:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-port?value
    ssl:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-ssl?value
    username:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-username?value
    password:x:/@p5.auth.my-settings.get/*/sephia/*/smtp-password?value
    envelope
      Subject:x:/../*/subject?value
      Sender
      To
      Cc
      Bcc
      body
        multipart:mixed
          text:plain
            content:x:/../*/body?value

  /*
   * Notifying user that email was successfully sent.
   */
  micro.windows.info:Email was successfully sent





/*
 * Saves outgoing [envelope] to database.
 *
 * Expects [envelope] as argument, being entire SMTP envelope.
 */
create-event:sephia.send-email._save-envelope

  /*
   * Open database connection.
   */
  p5.mysql.connect:[sephia]

    /*
     * Using database transaction, to avoid having incomplete database objects,
     * in case an exception occurs.
     */
    p5.mysql.transaction.begin

      /*
       * Needed later.
       */
      whoami

      /*
       * First adding any non existing contacts.
       */
      for-each:x:/../*/envelope/*(/To|/Cc|/Bcc)/*

        /*
         * Checking if contact exists from before.
         */
        p5.mysql.select:@"select count(*) from contacts where username = @username and email = @email"
          @username:x:/@whoami/*/username?value
          @email:x:/@_dp/#?value
        if:x:/@p5.mysql.select/*?count.int
          =:int:0

          /*
           * Inserting new contact, defaulting name to "Unknown".
           */
          p5.mysql.insert:@"insert into contacts (name, email, username) values ('Unknown', @email, @username)"
            @email:x:/@_dp/#?value
            @username:x:/@whoami/*/username?value

      /*
       * Checking if "sender" (self) exists in contact database.
       */
      _sender
      p5.mysql.select:@"select * from contacts where username = @username and email = @email"
        @username:x:/@whoami/*/username?value
        @email:x:/../*/envelope/*/Sender/*?value
      if:x:/@p5.mysql.select/*?count.int
        =:int:0

        /*
         * Inserting "self" (sender) into "contact" table in database.
         */
        p5.auth.my-settings.get
        p5.mysql.insert:@"insert into contacts (name, email, username) values (@name, @email, @username)"
          @name:x:/@p5.auth.my-settings.get/*/sephia/*/name?value
          @email:x:/@p5.auth.my-settings.get/*/sephia/*/email?value
          @username:x:/@whoami/*/username?value
        set:x:/@_sender?value
          src:x:/@p5.mysql.insert/*/id?value

      else

        /*
         * Self already exists in contacts table in database.
         */
        set:x:/@_sender?value
          src:x:/@p5.mysql.select/0/*/id?value

      /*
       * Checking if email is encrypted.
       */
      _encrypt:int:0
      if:x:/../*/envelope/*/body/*/multipart/*/encrypt
        set:x/@_encrypt?value
          src:int:1

      /*
       * Inserting into "email" table in database.
       * Using new Guid as "mimeid".
       */
      p5.types.guid.new
      p5.types.date.now
        local:true
      p5.mysql.insert:@"insert into emails (subject, date, sender, username, isread, mimeid, signature, encrypted, type) values (@subject, @date, @sender, @username, 1, @mimeid, @signature, @encrypted, 'sent')"
        @subject:x:/../*/envelope/*/Subject?value
        @date:x:/@p5.types.date.now?value
        @sender:x:/@_sender?value
        @username:x:/@whoami/*/username?value
        @mimeid:unknown-{0}
          :x:/@p5.types.guid.new?value.string
        @encrypted:x:/@_encrypt?value
        @signature:x:/../*/envelope/*/Sender/*?value

      /*
       * Inserting into "part" table in database.
       */
      p5.mysql.insert:@"insert into parts (type, content, emailid) values ('plain', @content, @emailid)"
        @content:x:/../*/envelope/*/body/**/text/[0,1]/*/content?value
        @emailid:x:/@p5.mysql.insert/@p5.mysql.insert/*/id?value

      /*
       * Inserting into "recipients" table in database.
       */
      for-each:x:/../*/envelope/*(/To|/Cc|/Bcc)/*
        p5.mysql.select:@"select id from contacts where username = @username and email = @email"
          @username:x:/@whoami/*/username?value
          @email:x:/../*/envelope/*/Sender/*?value
        p5.mysql.insert:@"insert into recipients (contactid, type, emailid) values (@contactid, @type, @emailid)"
          @contactid:x:/@p5.mysql.select/*/*/id?value
          @type:x:/@_dp/#/.?name
          @emailid:x:/..for-each/@p5.mysql.insert/@p5.mysql.insert/*/id?value

      /*
       * Inserting into "attachments" table in database.
       */
      for-each:x:/../*/file
        p5.mysql.insert:@"insert into attachments (filename, prefix, folder, emailid) values (@filename, @prefix, @folder, @emailid)"
          @filename:x:/@_dp/#/*/filename?value
          @prefix:x:/@_dp/#/*/prefix?value
          @folder:x:/@_dp/#/*/folder?value
          @emailid:x:/@p5.mysql.insert/@p5.mysql.insert/@p5.mysql.insert/*/id?value

      /*
       * Committing transaction.
       */
      p5.mysql.transaction.commit
