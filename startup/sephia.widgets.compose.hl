
/*
 * Extension widget for composing an email.
 *
 * Optionally you can pass in [subject], [body], [recipients][to], [recipients][cc] and [recipients][bcc].
 * All recipients arguments is a list of email addresses, where the email address is expected to be found
 * as the name of the node.
 *
 * You can also optionally pass in [.onclose] and [.onsend] lambda callbacks, which will be invoked when
 * email composer is closed and/or email is sent, in addition to [class], which will be the root class
 * of the composer.
 *
 * If you wish, you can also supply a [markdown-composer] argument, and set its value to "true", at which point
 * the email will be sent also as HTML, where the HTML will be created by converting the email's text content
 * to Markdown.
 *
 * You can optionally supply a [headers] collection, which is a generic collection of additional MIME headers
 * to send your email with.
 *
 * This widget will allow the user to compose an email, and send it, allowing the user to lookup contacts
 * from the contacts database, etc. When the email is sent, it will be stored as "sent" in Sephia's database.
 *
 * The class of the main root widget will be modified to contain either "warning" or "success" according to whether or
 * not email can be sent encrypted or not.
 *
 * Notice, caller is reponsible for making sure the necessary CSS files are included on the page.
 * By default, this widget requires Micro CSS, preferably with a skin, in addition to the main CSS file
 * for Sephia Five. However, this could probably be changed as you see fit, if you want another type of styling
 * for your widget.
 * All major elements on widget has CSS classes which you can hook into, if you wish to style it yourself.
 */
create-event:sephia.widgets.compose

  /*
   * Default values for arguments not supplied.
   */
  .defaults
    class:air-inner
    markdown-composer:bool:false

  /*
   * Including JavaScript necessary to handle uploading of attachments.
   *
   * This is done in an Ajax request invoking [.onupload] on a input element
   * on form which is actually hidden, and exclusively handled using JavaScript.
   */
  p5.web.include-javascript:@"
p5.sephia_upload_files = function(e) {
  var files = e.target.files;
  for(var i = 0; i < files.length; i++) {
    var reader = new FileReader();
    reader.onload = (function(file) {
      return function(data) {
        p5.$(e.target.id).raise('.onupload', {
          onbefore:function(pars,evt) {
            pars.push(['sephia-file-name', file.name], ['sephia-file-content', data.target.result.split('base64,')[1]]);
          }
        });
      }
    })(files[i]);
    reader.readAsDataURL(files[i]);
  }
}
"

  /*
   * Adding lambda callbacks for both [.onclose] and [.onsend].
   */
  add:x:/../*/return/*/div/*/.onsend
    src:x:/../*/.onsend/*
  add:x:/../*/return/*/div/*/.onclose
    src:x:/../*/.onclose/*

  /*
   * Adding contens of [oninit], if specified.
   */
  add:x:/../*/return/*/div/*/oninit
    src:x:/../*/oninit/*

  /*
   * Adding recipients to recipients widget.
   */
  add:x:/../*/return/**/sephia.widgets._recipients
    src:x:/../*/recipients/*

  /*
   * Adding attachments supplied by caller to email.
   */
  for-each:x:/../*/attachment
    eval-x:x:/+/*/*/*
    add:x:/../*/return/*/div/*/oninit
      src
        sephia.widgets.composer._add-attachment:x:/../*/_event?value
          filename:x:/@_dp/#?value

  /*
   * Necessary to figure out user's signature, which is consumed further down.
   */
  p5.auth.my-settings.get

  /*
   * Making sure we add any additional MIME headers requested by user.
   */
  add:x:/../*/return/**/sephia.core.send-email/*/headers
    src:x:/../*/headers/*

  /*
   * Returning actual widget to caller.
   */
  eval-x:x:/../*/return/**/widgets/=content/*(/input|/literal)/*/value|/../*/return/*/*/class|/../*/return/**/sephia.core.send-email/*/markdown
  return
    div
      oninit

        /*
         * Intercepting [onclick] of "Send" button to create an Ajax "wait window", since this action can take some time.
         */
        p5.web.include-javascript:@"
p5.sephia_send_email = function(e) {
  var obsc = document.createElement('div');
  obsc.id = 'sephia-composer-obscurer';
  obsc.className = 'sephia-composer-ajax-wait';
  var header = document.createElement('h1');
  var cnt = document.createTextNode('Please wait ...');
  header.appendChild(cnt);
  obsc.appendChild(header);
  document.body.appendChild(obsc);
  p5.$(e.currentTarget.id).raise('.onclick', {
    onsuccess:function(){
      var obsc = p5.$('sephia-composer-obscurer').el;
      obsc.parentElement.removeChild(obsc);
    }});
  e.stopPropagation();
  return false;
}"
      .onsend
      .onclose
      .email-composer
      class:x:(/../*/class|/@.defaults/*/class)/$?value
      events

        /*
         * Adds an attachment to your email.
         *
         * Requires [filename] as argument.
         */
        sephia.widgets.composer._add-attachment

          /*
           * Verifying this is our instance.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * Not our instance, returning early.
             */
            return

          /*
           * Finding main attachment wrapper widget for instance.
           */
          p5.web.widgets.find-first:x:/../*/_event?value
            class:sephia-compose-attachments

          /*
           * Figuring out filename, without path.
           */
          split:x:/../*/filename?value
            =:/

          /*
           * Creating widget wrapping given attachment, such that it will be automatically serialized
           * when form is serialized.
           */
          create-widget
            class:sephia-attachment
            parent:x:/@p5.web.widgets.find-first/*/*?value
            widgets
              input
                type:hidden
                .data-field:attachment
                value:x:/../*/filename?value
              button
                innerValue:x:/@split/0/-?name
                onclick

                  /*
                   * Deleting widget wrapping attachment.
                   *
                   * Notice, we can't delete the actual file here, since it might
                   * not necessarily be an uploaded attachment, but rather a file from
                   * anywhere else within the root folder of P5.
                   *
                   * However, if file was in user's temp attachment folder, it will be deleted
                   * the next time user refreshes his page, or starts Sephia Five, hence
                   * we don't need to delete it.
                   */
                  p5.web.widgets.get-parent:x:/../*/_event?value
                  micro.form.serialize:x:/-/*/*?value
                  delete-widget:x:/@p5.web.widgets.get-parent/*/*?value

      widgets:content

        /*
         * Subject of reply.
         */
        input
          type:text
          class:fill sephia-compose-subject
          placeholder:Subject ...
          .data-field:subject
          value:x:/../*/subject?value
          oninit

            /*
             * Settings initial focus to "subject" of email.
             */
            micro.page.set-focus:x:/../*/_event?value

        /*
         * Body of reply.
         */
        literal
          element:textarea
          class:fill sephia-compose-body
          placeholder:Content ...
          .data-field:body
          rows:15
          value:@"{0}


-- 
{1}"
            :x:/../*/body?value
            :x:/@p5.auth.my-settings.get/*/sephia/*/signature?value

        /*
         * Wrapper for attachments.
         */
        container
          class:sephia-compose-attachments

        /*
         * Our "select recipient" extension widget.
         *
         * This is the widget that allows the user to add recipients to his email.
         * This is being done by displaying three textbox input elements for "to", "cc" and "bcc",
         * and allowing user to append to these widgets, by doing a lookup into his or her "contacts"
         * database, and/or typing into the textbox adding a new email to the list of recipients.
         */
        sephia.widgets._recipients

        /*
         * Button strip at bottom for "send", "add attachment", "discard", etc.
         */
        div
          class:right sephia-compose-footer
          widgets
            div
              class:strip
              style:"display:inline-block;"
              widgets

                /*
                 * Send button.
                 */
                button
                  innerValue:@"<span class=""icon-send""></span>"
                  style:"margin-bottom:0;"
                  class:sephia-compose-send
                  title:Send email
                  onclick:@"return p5.sephia_send_email(event);"
                  .onclick

                    /*
                     * Sending email.
                     *
                     * Making sure we wrap attempt in try/catch block, to give user friendly error messages.
                     */
                    try

                      /*
                       * Finding root composer widget, and serializing all form elements within it.
                       */
                      p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                        .email-composer
                      micro.form.serialize:x:/-/*/*?value

                      /*
                       * Making sure we HTML decode the body.
                       */
                      set:x:/@micro.form.serialize/*/body?value
                        p5.html.html-decode:x:/@micro.form.serialize/*/body?value

                      /*
                       * Looping through each attachment specified by user.
                       */
                      for-each:x:/@micro.form.serialize/*/attachment
                        eval-x:x:/+/*/*
                        add:x:/..try/*/sephia.core.send-email/*/attachments
                          src
                            file:x:/@_dp/#?value

                      /*
                       * Invoking Active Event responsible for sending email, passing in arguments
                       * from above serialization invocation.
                       */
                      add:x:/+
                        src:x:/@micro.form.serialize/*(!/attachment!/no-data)
                      sephia.core.send-email
                        headers
                        markdown:x:(/../*/markdown-composer|/../*/.defaults/*/markdown-composer)/$?value
                        attachments

                      /*
                       * Invoking specified [.onclose] and [.onsend] lambda objects given during creation of widget.
                       */
                      p5.web.widgets.ajax-events.raise:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                        .onsend
                        .onclose

                    catch

                      /*
                       * Oops, displaying error to user in a modal widget.
                       */
                      create-widgets
                        micro.widgets.modal:sephia-error-modal-widget
                          class:micro-modal micro-modal-smaller
                          widgets
                            h3
                              innerValue:Oops!
                            p
                              innerValue:Oops, email could not be sent. Message from system was; '{0}'
                                :x:/../*/catch/*/message?value
                            div
                              class:right
                              widgets
                                button
                                  innerValue:OK
                                  oninit
                                    micro.page.set-focus:x:/../*/_event?value
                                  onclick
                                    delete-widget:sephia-error-modal-widget

                /*
                 * Hidden file input element, handled through JavaScript, that allows user
                 * to add attachments to his email.
                 */
                input
                  style:"display:none;"
                  type:file
                  multiple
                  class:sephiaAttachmentFileInput
                  .data-field:no-data
                  .onupload

                    /*
                     * Retrieving the file name, and verifying it's a legal extension.
                     */
                    p5.web.post.get:sephia-file-name
                    eval-x:x:/+/*
                    sephia.core._get-mime-type
                      filename:x:/@p5.web.post.get/*?value
                    if:x:/-/*
                      not

                      /*
                       * File's extension are not a legal type of attachment in Sephia.
                       */
                      micro.windows.info:'{0}' is not a legal file type in Sephia Five
                        :x:/@p5.web.post.get/*?value
                        class:micro-windows-info micro-windows-info-error
                      return

                    /*
                     * Base64 decoding file content, and saving it to user's temporary attachment folder.
                     */
                    p5.web.post.get:sephia-file-content
                    p5.string.decode-base64:x:/-/*?value
                    save-file:@SEPHIA-USER-ATTACHMENTS/tmp/{0}
                      :x:/../*/p5.web.post.get/[0,1]/*?value
                      src:x:/@p5.string.decode-base64?value

                    /*
                     * Adding attachment to email.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .email-composer
                    eval-x:x:/+/*/*
                    add:x:/../*/sephia.widgets.composer._add-attachment
                      src
                        filename:@SEPHIA-USER-ATTACHMENTS/tmp/{0}
                          :x:/../*/p5.web.post.get/[0,1]/*?value
                    sephia.widgets.composer._add-attachment:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                  onchange:"p5.sephia_upload_files(event);"

                /*
                 * Add attachment button.
                 *
                 * Will trigger the above "file" input element's "open and browse for local files" popup.
                 */
                button
                  innerValue:@"<span class=""icon-folder-open-o""></span>"
                  style:"margin-bottom:0;"
                  class:sephia-compose-add-attachment
                  title:Add attachments
                  onclick:@"document.querySelector('.sephiaAttachmentFileInput').click();return false;"

                /*
                 * Discard email button.
                 */
                button
                  innerValue:@"<span class=""icon-close""></span>"
                  style:"margin-bottom:0;"
                  class:sephia-compose-discard-email
                  title:Discard email
                  onclick

                    /*
                     * Invoking specified [.onclose] lambda object given during creation of widget.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .email-composer
                    p5.web.widgets.ajax-events.raise:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                      .onclose
