
/*
 * Will search the configured PGP key server for a key matching the given [_arg] query,
 * and return a collection of potential candidates.
 *
 * [_arg] can be an email address, a name or a key ID.
 * Unfortunately, you cannot search for keys using fingerprints as your query.
 *
 * Return value will be a collection of keys, where the name is the fingerprint, the
 * value the key ID, and each candidate containing [Created] being the creation date,
 * in yyyy-MM-dd string format, and a [uid] being the first User ID associated with the key.
 */
create-event:sephia.pgp.key-server.search

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    _arg:string

  /*
   * Loading key server configuration setting.
   */
  load-file:@SEPHIA/configuration/key-server.hl

  /*
   * Using HTTP GET to query for key on server, making sure we URL encode query.
   */
  p5.html.url-encode:x:/../*/_arg?value
  add:x:/../*/p5.http.xxx
    src:x:/@load-file/*/*/search-key-url/*(!/http-verb!/query-arg-name!/.get-results)
  set:x:/../*/p5.http.xxx?name
    src:p5.http.{0}
      :x:/@load-file/*/*/search-key-url/*/http-verb?value
  p5.http.xxx:"{0}{1}={2}"
    :x:/@load-file/*/*/search-key-url?value
    :x:/@load-file/*/*/search-key-url/*/query-arg-name?value
    :x:/@p5.html.url-encode?value

  /*
   * Converting result from above HTTP GET invocation to a lambda object,
   * such that we can intelligently parse the results, to look for keys.
   *
   * We do this by invoking the [.get-results] in configuration file for key server.
   */
  eval-x:x:/+/*
  eval:x:/@load-file/*/*/search-key-url/*/.get-results
    result:x:/../*/~p5.http./*/result/*/content

  /*
   * Looping through each result from above invocation, and adding only the fingerprint parts
   * into our "return collection".
   */
  add:x:/../*/return
    src:x:/@eval/*

  /*
   * Returning results to caller.
   */
  return