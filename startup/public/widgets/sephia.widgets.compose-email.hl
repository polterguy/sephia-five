﻿
/*
 * Extension widget for composing an email.
 *
 * Optionally you can pass in [subject], [body], [recipients][to], [recipients][cc] and [recipients][bcc].
 * All recipients arguments is a list of email addresses, where the email address is expected to be found
 * as the name of the node.
 *
 * You can also pass in several [attachment] arguments, where the value of each [attachment], is expected to 
 * be a file that already exists on server, with its complete path.
 *
 * You can also optionally pass in a [babelsubject], which will make sure your email is using the specified
 * babelsubject, and doesn't create a new one, if the subject is supposed to be babelized.
 *
 * You can also optionally pass in a [headers] collection, which will be MIME headers associated with the message
 * once it is sent.
 *
 * You can also optionally pass in [.onclose] and [.onsend] lambda callbacks, which will be invoked when
 * email composer is closed, and/or email is sent, in addition to [class], which will be the root class
 * of the composer. Anything inside of an argument called [oninit] will be appended into the widget's [oninit]
 * Ajax event.
 *
 * This widget will allow the user to compose an email, and send it, allowing the user to lookup contacts
 * from the contacts database, etc. When the email is sent, it will be stored as "sent" in Sephia's database.
 *
 * The class of the main root widget will be modified to contain either "sephia-unsafe", "sephia-unknown" or 
 * "sephia-safe" according to whether or not the email can be sent encrypted or not, and if it can be cryptographically
 * signed, and if all PGP keys involved have been verified.
 *
 * Notice, caller is reponsible for making sure the necessary CSS files are included on the page.
 *
 * By default, this widget requires Micro CSS, preferably with a skin, and the "fonts.css" file, in addition to the 
 * main CSS file for Sephia Five. However, this could probably be changed as you see fit, if you want another type 
 * of styling for your widget.
 *
 * All major elements on the widget has CSS classes which you can hook into, if you wish to style it yourself.
 */
create-event:sephia.widgets.compose-email

  /*
   * Default values for arguments not supplied.
   */
  .defaults
    class:air-inner shaded rounded

  /*
   * Sanity checking optional arguments.
   */
  micro.lambda.contract.optional:x:/..
    subject:string
    babelsubject:string
    body:string
    recipients
    headers

  /*
   * Including JavaScript necessary to handle uploading of attachments.
   *
   * This is done in an Ajax request invoking [.onupload] on a input element
   * on form which is actually hidden, and exclusively handled using JavaScript.
   */
  p5.web.include-javascript:@"
p5.sephia_upload_files = function(e) {
  var files = e.target.files;
  for(var i = 0; i < files.length; i++) {
    var reader = new FileReader();
    reader.onload = (function(file) {
      return function(data) {
        p5.$(e.target.id).raise('.onupload', {
          onbefore:function(pars,evt) {
            pars.push(['sephia-file-name', file.name], ['sephia-file-content', data.target.result.split('base64,')[1]]);
          }
        });
      }
    })(files[i]);
    reader.readAsDataURL(files[i]);
  }
}
"

  /*
   * Adding lambda callbacks for both [.onclose], [.onsend] and [oninit].
   */
  add:x:/../*/return/*/div/*/.onsend
    src:x:/../*/.onsend/*
  add:x:/../*/return/*/div/*/.onclose
    src:x:/../*/.onclose/*
  add:x:/../*/return/*/div/*/oninit
    src:x:/../*/oninit/*

  /*
   * Adding custom headers requested by caller.
   */
  add:x:/../*/return/**/sephia.send-email
    src:x:/../*/headers

  /*
   * Adding recipients to recipients widget.
   */
  add:x:/../*/return/**/sephia._internals.widgets.recipients
    src:x:/../*/recipients/*

  /*
   * Making sure attachments supplied by caller is attached, by invoking the
   * event responsible for attaching the file in [oninit] of widget for each [attachment]
   * user supplied during creating widget.
   */
  for-each:x:/../*/attachment

    /*
     * Checking if this is a legal attachment file type for Sephia Five.
     */
    sephia._internals.is-legal-attachment:x:/@_dp/#?value
    if:x:/@sephia._internals.is-legal-attachment?value
      =:warning

      /*
       * User should be warned.
       */
      add:x:/..for-each/**/sephia.widgets.compose-email._add-attachment
        src:"warning:bool:true"

    else-if:x:/@sephia._internals.is-legal-attachment?value
      not

      /*
       * Attachment is not legal at all.
       */
      split:x:/@_dp/#?value
        =:/
      throw:Sorry, but the '{0}' file is not a legal attachment
        :x:/@split/0/-?name

    /*
     * Making sure we add our attachment.
     */
    eval-x:x:/+/*/*/*
    add:x:/../*/return/*/div/*/oninit
      src

        /*
         * Notice, the first expression is evaluated only when [oninit] is evaluated, while
         * the inner [filename] expression was evaluated when lambda was added to [oninit].
         */
        sephia.widgets.compose-email._add-attachment:x:/../*/_event?value
          filename:x:/@_dp/#?value

  /*
   * Necessary to figure out user's signature, which is consumed further down.
   */
  p5.auth.my-settings.get

  /*
   * Checking if caller provided an explicit "babel subject".
   */
  if:x:/../*/babelsubject?value
    eval-x:x:/+/*/*
    add:x:/../*/return/**/sephia.send-email
      src
        babelsubject:x:/../*/babelsubject?value

  /*
   * Returning actual widget to caller.
   */
  eval-x:x:/../*/return/**/widgets/=content/*(/input|/literal)/*/value|/../*/return/*/*/class
  return
    div
      oninit

        /*
         * Including CSS file for Sephia.
         */
        p5.web.include-css-file:@SEPHIA/media/main.css

        /*
         * Intercepting [onclick] of "Send" button to create an Ajax "wait window", since this action can take some time.
         */
        p5.web.include-javascript:@"
p5.sephia_send_email = function(e) {{
  var main = p5.$('{0}').el;
  var obsc;
  for(var idx = 0; idx < main.childNodes.length; idx++) {{
    if(main.childNodes[idx].className == 'micro-ajax-wait') {{
      obsc = main.childNodes[idx];
      break;
    }}
  }}
  obsc.style.display = 'block';
  p5.$(e.currentTarget.id).raise('.onclick', {{
    onsuccess:function(){{
      obsc.style.display = 'none';
    }}}});
  e.stopPropagation();
  return false;
}}"
          :x:/../*/_event?value
      .onsend
      .onclose
      .email-composer
      class:x:(/../*/class|/@.defaults/*/class)/$?value
      events

        /*
         * Adds an attachment to your email.
         *
         * Requires [filename] as argument.
         */
        sephia.widgets.compose-email._add-attachment

          /*
           * Verifying this is our instance.
           */
          if:x:/../*/_arg?value
            !=:x:/../*/_event?value

            /*
             * Not our instance, returning early.
             */
            return

          /*
           * Finding main attachment wrapper widget for instance.
           */
          p5.web.widgets.find-first:x:/../*/_event?value
            class:sephia-attachments

          /*
           * Figuring out filename, without path.
           */
          split:x:/../*/filename?value
            =:/

          /*
           * Checking if user should be warned about this attachment.
           */
          if:x:/../*/warning?value

            /*
             * User should be warned that this is a potential malicious attachment.
             */
            set:x:/../*/create-widget/*/class?value
              src:{0} warning
                :x:/../*/create-widget/*/class?value

          /*
           * Creating our actual attachment widget, such that when the form is
           * serialised, a hidden input field will contain the attachment's filename.
           */
          create-widget
            class:sephia-attachment
            parent:x:/@p5.web.widgets.find-first/*/*?value
            widgets
              input
                type:hidden
                .data-field:attachment
                value:x:/../*/filename?value
              button
                innerValue:x:/@split/0/-?name
                onclick

                  /*
                   * Deleting widget wrapping attachment.
                   *
                   * Notice, we can't delete the actual file here, since it might
                   * not necessarily be an uploaded attachment, but rather a file from
                   * anywhere else within the root folder of P5.
                   *
                   * However, if file was in user's temp attachment folder, it will be deleted
                   * the next time user refreshes his page, or starts Sephia Five.
                   * Hence, we don't need to delete it, since inevitably it will be deleted later 
                   * at some point.
                   */
                  p5.web.widgets.get-parent:x:/../*/_event?value
                  delete-widget:x:/-/*/*?value

      widgets:content

        /*
         * Obscurer widget, used when user is sending an email.
         */
        micro.widgets.obscurer
          message:Sending your email, please wait ...
          style:"display:none;"

        /*
         * Subject of reply.
         */
        input
          type:text
          class:fill sephia-compose-subject
          placeholder:Subject ...
          .data-field:subject
          value:x:/../*/subject?value
          oninit

            /*
             * Settings initial focus to "subject" of email.
             */
            micro.page.set-focus:x:/../*/_event?value

        /*
         * Body of reply.
         *
         * Notice, the signature of user is automatically appended into the email's body.
         */
        literal
          element:textarea
          class:fill sephia-compose-body
          placeholder:Content ...
          .data-field:body
          rows:15
          value:@"{0}


-- 
{1}"
            :x:/../*/body?value
            :x:/@p5.auth.my-settings.get/*/sephia/*/signature?value

        /*
         * Wrapper for attachments.
         */
        container
          class:sephia-attachments

        /*
         * Our "select recipient" extension widget.
         *
         * This is the widget that allows the user to add recipients to his email.
         * This is being done by displaying three textbox input elements for "to", "cc" and "bcc",
         * and allowing user to append to these widgets, by doing a lookup into his or her "contacts"
         * database, and/or typing into the textbox adding a new email to the list of recipients.
         *
         * This widget might be initially populated with [to], [cc] and [bcc] arguments, if our compose
         * widget was invoked with these arguments.
         */
        sephia._internals.widgets.recipients

        /*
         * Button strip at bottom for "send", "add attachment", "discard", etc.
         */
        div
          class:right sephia-compose-footer
          widgets
            div
              class:strip
              style:"display:inline-block;"
              widgets

                /*
                 * Send button.
                 */
                button
                  innerValue:@"<span class=""icon-send""></span>"
                  style:"margin-bottom:0;"
                  class:sephia-compose-send
                  title:Send email
                  onclick:@"return p5.sephia_send_email(event);"
                  .onclick

                    /*
                     * Sends email.
                     *
                     * Finding root composer widget, and serializing all form elements within it.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .email-composer
                    micro.form.serialize:x:/-/*/*?value

                    /*
                     * Verifying user provided a subject.
                     */
                    if:x:/@micro.form.serialize/*/subject?value
                      =:

                      /*
                       * User supplied no subject, informing him, and returning early.
                       */
                      micro.windows.info:No subject supplied
                        class:micro-windows-info warning
                      return

                    /*
                     * Retrieving user's settings, to figure out if we should create
                     * an alternative HTML view, by converting the text content into Markdown.
                     */
                    p5.auth.my-settings.get

                    /*
                     * Sending email.
                     *
                     * Making sure we wrap attempt in try/catch block, to give user friendly error messages.
                     */
                    try

                      /*
                       * Invoking Active Event responsible for sending email, passing in arguments
                       * from above serialization invocation, except for [no-data], which is our
                       * hidden input/file element, used to upload attachments to server.
                       */
                      eval-x:x:/+2/*
                      add:x:/+
                        src:x:/@micro.form.serialize/*(!/no-data)
                      sephia.send-email
                        markdown:x:/@p5.auth.my-settings.get/*/sephia/*/markdown?value

                      /*
                       * Checking if email was successfully sent, and if not, explaining to
                       * user that one of the recipients was not on his list of contacts, and
                       * asking him if he still wants to send the email.
                       */
                      if:x:/@sephia.send-email?value
                        =:bool:false

                        /*
                         * Warning user, and asking him to confirm that he wants to send the email, even
                         * though some recipient(s) are not in his list of contacts.
                         */
                        eval-x:x:/+/**(/_widget|/_composer|/parent)
                        micro.windows.info:@"At least one recipient was not a contact, send anyway?"
                          class:micro-windows-info micro-windows-info-sticky warning
                          widgets
                            button
                              innerValue:No
                              oninit
                                micro.page.set-focus:x:/../*/_event?value
                              onclick
                                delete-widget:micro-windows-info
                            button
                              innerValue:Yes
                              onclick:@"return p5.sephia_send_email(event);"
                              .onclick

                                /*
                                 * Creating a hidden input element, that will be serialized when form is
                                 * serialized, and pass in [force] to [sephia.send-email], forcing the
                                 * email to be sent, even though one of the contacts was not in user's list of contacts.
                                 *
                                 * Then we simply invoke [.onclick] once again, which will force the email to be sent.
                                 */
                                _widget:x:/../*/_event?value
                                _composer:x:/../*/p5.web.widgets.find-first-ancestor/*/*?value
                                create-widget
                                  parent:x:/@_composer?value
                                  element:input
                                  type:hidden
                                  .data-field:force
                                  value:true
                                p5.web.widgets.ajax-events.raise:x:/@_widget?value
                                  .onclick

                        return

                      /*
                       * Invoking specified [.onclose] and [.onsend] lambda objects given during creation of widget.
                       */
                      p5.web.widgets.ajax-events.raise:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                        .onsend
                        .onclose

                    catch

                      /*
                       * Oops, invoking our exception handler file.
                       */
                      add:x:/+
                        src:x:/..catch/*(/message|/type|/stack-trace)
                      sephia._internals.handle-exception
                        error:Couldn't send email

                /*
                 * Preview button.
                 */
                button
                  innerValue:@"<span class=""icon-eye""></span>"
                  style:"margin-bottom:0;"
                  class:sephia-compose-preview
                  title:Preview email
                  onclick

                    /*
                     * Allows user to preview how email will look like once sent.
                     *
                     * First retrieving body widget's content.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .email-composer
                    p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                      .data-field:body

                    /*
                     * Checking if preview widget is already visible, and if so,
                     * instead of showing it, we delete it, show the writer widget,
                     * and return early.
                     */
                    get-widget-property:x:/@p5.web.widgets.find/*/*?value
                      visible
                    if:x:/@get-widget-property/*/*?value
                      not

                      /*
                       * Deleting preview widget, displaying write widget, and
                       * returning early.
                       */
                      p5.web.widgets.find:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                        .preview
                      delete-widget:x:/@p5.web.widgets.find/*/*?value
                      set-widget-property:x:/./@p5.web.widgets.find/*/*?value
                        visible:true
                      return

                    /*
                     * Converting body of email to markdown.
                     */
                    get-widget-property:x:/@p5.web.widgets.find/*/*?value
                      value
                    sephia._internals.markdown-to-html:x:/@get-widget-property/*/*?value

                    /*
                     * Hiding body typing widget, and displaying a preview widget instead.
                     */
                    set-widget-property:x:/@p5.web.widgets.find/*/*?value
                      visible:false
                    create-widget
                      after:x:/@p5.web.widgets.find/*/*?value
                      .preview
                      widgets
                        div
                          class:sephia-reader sephia-reader-sent
                          style:"margin-bottom:1rem;"
                          widgets
                            div
                              class:sephia-reader-content
                              innerValue:x:/@sephia._internals.markdown-to-html?value

                /*
                 * Hidden file input element, handled through JavaScript, that allows user
                 * to add attachments to his email.
                 */
                input
                  style:"display:none;"
                  type:file
                  multiple
                  class:sephiaAttachmentFileInput
                  .data-field:no-data
                  onchange:"p5.sephia_upload_files(event);"
                  .onupload

                    /*
                     * Retrieving the file name, and verifying it's a legal extension.
                     */
                    p5.web.post.get:sephia-file-name
                    sephia._internals.is-legal-attachment:x:/@p5.web.post.get/*?value
                    if:x:/@sephia._internals.is-legal-attachment?value
                      =:false

                      /*
                       * File's extension is not a legal type of attachment in Sephia.
                       *
                       * Showing error "bubble window" to user, and returning early.
                       */
                      split:x:/@p5.web.post.get/*?value
                        =:/
                      micro.windows.info:'{0}' is not a legal file type
                        :x:/@split/0/-?name
                        class:micro-windows-info warning
                      return

                    /*
                     * Base64 decoding file content, and saving it to user's temporary attachment folder.
                     */
                    p5.web.post.get:sephia-file-content
                    p5.string.decode-base64:x:/-/*?value
                    save-file:@SEPHIA-USER-ATTACHMENTS/tmp/{0}
                      :x:/../*/p5.web.post.get/[0,1]/*?value
                      src:x:/@p5.string.decode-base64?value

                    /*
                     * Adding attachment to email.
                     *
                     * Notice, this is done first of all by attaching a visible button to email composer, which
                     * once clicked, will delete the attachment from email.
                     *
                     * In addition, an hidden input element, with the attachment's filename will be added, that
                     * will be automatically serialized as part of the email's content when the form is serialized,
                     * getting ready to send the email.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .email-composer
                    eval-x:x:/+/*/*
                    add:x:/../*/sephia.widgets.compose-email._add-attachment
                      src
                        filename:@SEPHIA-USER-ATTACHMENTS/tmp/{0}
                          :x:/../*/p5.web.post.get/[0,1]/*?value

                    /*
                     * Invoking the event responsible for associating the attachment wilt email, that will
                     * create our button and hidden input element.
                     */
                    if:x:/@sephia._internals.is-legal-attachment?value
                      =:warning

                      /*
                       * User should be warned about this attachment, since its file extension
                       * is considered containing potential malicious content.
                       */
                      add:x:/../*/sephia.widgets.compose-email._add-attachment
                        src:"warning:bool:true"

                    /*
                     * Invoking event responsible for adding attachment to email.
                     */
                    sephia.widgets.compose-email._add-attachment:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                /*
                 * Add attachment button.
                 *
                 * Will trigger the above "file" input element's "open and browse for local files" popup.
                 */
                button
                  innerValue:@"<span class=""icon-folder-open""></span>"
                  style:"margin-bottom:0;"
                  class:sephia-compose-add-attachment
                  title:Add attachments

                  /*
                   * TODO: Won't work if multiple emails are being composed at the same time, since it'll trigger the click for 
                   * all of these buttons!
                   */
                  onclick:@"document.querySelector('.sephiaAttachmentFileInput').click();return false;"

                /*
                 * Discard email button.
                 */
                button
                  innerValue:@"<span class=""icon-close""></span>"
                  style:"margin-bottom:0;"
                  class:sephia-compose-discard-email
                  title:Discard email
                  onclick

                    /*
                     * Invoking specified [.onclose] lambda object given during creation of widget.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .email-composer
                    p5.web.widgets.ajax-events.raise:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                      .onclose
