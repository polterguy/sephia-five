
/*
 * Returns the MIME type for a file name, in addition to the "Content-Transfer-Encoding", unless file is transferred as as.
 *
 * Requires [filename], [folder] and [prefix].
 *
 * If [filename] is a non-supported file type, meaning its file extension is not valid for a Sephia attachment,
 * it will return nothing.
 * Otherwise it will return the MIME type, and Content-Disposition, in addition to Content-Transfer-Encoding, 
 * unless it's plain text.
 */
create-event:sephia._internals.mime.get-type-from-file-extension

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    filename:string
    folder:string
    prefix:string

  /*
   * Making sure we do a "lowers" comparison.
   */
  set:x:/../*/filename?value
    to-lower:x:/../*/filename?value

  /*
   * Splitting [filename] to figure out its extension.
   */
  split:x:/../*/filename?value
    =:.
  load-file:@SEPHIA/configuration/legal-mime-types.hl
  if:x:/@load-file/*/*/{0}
    :x:/@split/0/-?name

    /*
     * Supported file type, first adding MIME type to [return], and possibly
     * a "Content-Transfer-Encoding" header.
     */
    add:x:/../*/return
      src:x:/@load-file/*/*/{0}/*
        :x:/@split/0/-?name

    /*
     * Adding "Content-Disposition" MIME header.
     */
    eval-x:x:/+/*/*
    add:x:/../*/return/*
      src
        Content-Disposition:@"attachment; filename=""{0}"""
          :x:/../*/filename?value
        filename:{0}{1}-{2}
          :x:/../*/folder?value
          :x:/../*/prefix?value
          :x:/../*/filename?value

    /*
     * Checking if this is one of the file types that requires the user to be
     * warned about its content.
     */
    if:x:/@load-file/*/*/{0}/--/.warning
      :x:/@split/0/-?name

      /*
       * Adding our "warning return" value.
       */
      add:x:/../*/return
        src:warning

  /*
   * Return invocation is dynamically populated in above code, 
   * if file specified is a supported MIME file extension.
   */
  return
