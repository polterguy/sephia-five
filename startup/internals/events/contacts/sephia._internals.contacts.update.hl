﻿﻿
/*
 * Updates the given [id] contact.
 *
 * Expects [name], [email], [id] and optionally [fingerprint], [verified], [type],
 * [spam] and [unverify].
 *
 * Optionally pass in [fingerprint], which is the fingerprint of the public PGP key
 * the contact should be associated with. Notice, if you pass in a fingerprint,
 * it will only be associated with the contact if we can find the public PGP key, 
 * and contact does not already have a verified fingerprint from before.
 *
 * If the [fingerprint] doesn't exist in your GnuPG database, this event will try 
 * to search for that specified public PGP key using Sephia's key server configuration,
 * and automatically download the public key with the specified fingerint, and put
 * it into your GnuPG database. Yet again, only if contact does not have an existing
 * verified fingerprint.
 *
 * If you pass in [unverify] as boolean "true", any existing fingerprints will be
 * removed, and the contact will be set to not verified, regardless of whether or
 * not his existing fingerprint is verified or not. This is a security measure,
 * explicitly put in place, to make sure you don't accidentally in your own code,
 * updates an existing verified contact's fingerprint to to something else.
 *
 * Hence, to change an existing verified fingerprint, actually requires two 
 * invocations to this event.
 *
 * If the key with the specified [fingerprint] is found, either in the GnuPG database, 
 * or successfully downloaded from your key server, only then the fingerprint will 
 * actually be associated with the contact.
 *
 * If you pass in a [fingerprint] and [verified], and set [verified]'s value to 
 * boolean "true", and the [fingerprint] key can somehow be found, the contact 
 * will have his fingerprint set to verified, unless the contact already has another
 * verified fingerprint.
 *
 * You can also optionally pass in [spam], which can be either "0" or "1", where "0" 
 * means that all future emails originating from the contact, is not to be treated 
 * as spam, and "1" means that all future email from the contact is to be treated as
 * spam.
 *
 * If you don't pass in [spam], then the spam filters in Sephia will try to 
 * determine if emails from the contact are to be considered spam or not as the
 * contact sends you emails in the future. Which depends upon which spam filters
 * you have configured Sephia to use.
 *
 * You can also pass in [type], which becomes a categorisation of your contact.
 * For instance, the user's own contact is of type "self".
 *
 * Notice, the event expects an open database connection to the Sephia database.
 */
create-event:sephia._internals.contacts.update

  /*
   * Making sure invoker obeys by lambda contract.
   */
  micro.lambda.contract.min:x:/..
    name:string
    email:string
    id:long

  /*
   * Sanity checking optional arguments.
   */
  micro.lambda.contract.optional:x:/..
    fingerprint
    verified:bool
    spam
    type
    unverify:bool

  /*
   * Used to hold any fingerprints of public PGP key matching email, and whether
   * or not the fingerprint has been verified.
   */
  _fingerprint
  _is-verified:int:0

  /*
   * Checking if contact has an existing fingerprint, and it is verified, at which
   * point we do NOT update the fingerprint for the contact.
   */
  p5.mysql.select:@"select name, email, fingerprint, isverified, type, spam from contacts where id = @id"
    @id:x:/../*/id?value

  /*
   * Checking if caller provided a [fingerprint] argument, and the contact does
   * not have an existing fingerprint association, or that his fingerprint have
   * not yet been verified. Only then we allow for updating the contact's fingerprint.
   */
  if:x:/../*/fingerprint?value
    and:x:/@p5.mysql.select/*/*/isverified?value.int
      =:int:0
      or:x:/@p5.mysql.select/*/*/fingerprint?value
        not
    and:x:/../*/unverify?value
      !=:bool:true

    /*
     * Caller provided a new fingerprint, and the contact's existing fingerprint
     * was not verified, or the contact's fingerprint has been deleted.
     *
     * Hence, attempting to find the given [fingerprint] key for the given [email]
     * using our key server.
     */
    eval-x:x:/+/*
    sephia.pgp.key-server.get
      email:x:/../*/email?value
      fingerprint:x:/../*/fingerprint?value
    if:x:/-?value

      /*
       * We found the public PGP key on key server.
       */
      set:x:/../*/_fingerprint?value
        to-upper:x:/../*/fingerprint?value

  else-if:x:/@p5.mysql.select/*/*/fingerprint?value
    and:x:/../*/unverify?value
      !=:bool:true

    /*
     * Using existing fingerprint, and verification, regardless of whether or 
     * not the caller provided a [fingerprint] argument.
     */
    set:x:/@_fingerprint?value
      src:x:/@p5.mysql.select/*/*/fingerprint?value
    set:x:/../*/_is-verified?value
      src:x:/@p5.mysql.select/*/*/isverified?value.int

  else-if:x:/../*/unverify?value

    /*
     * Caller requested to "unverify" the contact.
     */
    set:x:/@_fingerprint?value
      src
    set:x:/@_is-verified?value
      src:int:0

  /*
   * Checking if caller requested contact to be updated to a verified contact.
   */
  if:x:/../*/verified?value
    and:x:/@_fingerprint?value

    /*
     * We have a fingerprint for contact, and caller requested that contact be updated
     * to become verified - Hence, we set status of contact to verified.
     */
    set:x:/@_is-verified?value
      src:int:1

  /*
   * Checking if anything actually changed, and if not, returning early.
   */
  if:x:/@p5.mysql.select/*/*/name?value
    =:x:/../*/name?value
    and:x:/@p5.mysql.select/*/*/email?value
      =:x:/../*/email?value
    and:x:/@p5.mysql.select/*/*/fingerprint?value
      =:x:/@_fingerprint?value
    and:x:/@p5.mysql.select/*/*/isverified?value.int
      =:x:/@_is-verified?value
    and:x:/@p5.mysql.select/*/*/spam?value
      =:x:/../*/spam?value
    and:x:/@p5.mysql.select/*/*/type?value
      =:x:/../*/type?value

    /*
     * Nothing changed, returning early.
     */
    return

  /*
   * Checking if caller supplied a [spam] argument, and if not, keeping the
   * existing spam value around.
   *
   * Notice, to delete an existing spam value, pass in an empty [spam] node.
   */
  if:x:/../*/spam
    not
    set:x:/../*/p5.mysql.update/*/\@spam?value
      src:x:/@p5.mysql.select/*/*/spam?value

  /*
   * Checking if caller supplied a [type] argument, and if not, keeping the
   * existing type value around.
   *
   * Notice, to delete an existing type value, pass in an empty [type] node.
   */
  if:x:/../*/type
    not
    set:x:/../*/p5.mysql.update/*/\@type?value
      src:x:/@p5.mysql.select/*/*/type?value

  /*
   * Updating our contact.
   */
  p5.mysql.update:@"update contacts set name = @name, email = @email, fingerprint = @fingerprint, isverified = @isverified, type = @type, spam = @spam where id = @id"
    @name:x:/../*/name?value
    @email:x:/../*/email?value
    @fingerprint:x:/@_fingerprint?value
    @isverified:x:/@_is-verified?value
    @type:x:/../*/type?value
    @spam:x:/../*/spam?value
    @id:x:/../*/id?value
