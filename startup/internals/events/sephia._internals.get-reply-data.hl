
/*
 * Given an ID to an email as [_arg], will return the reply data for email,
 * including wrapping original content inside of quoting, removing the signature,
 * and returning its [to] field.
 *
 * Optionally pass in [all], and set its value to boolean true, to have it also return
 * the [cc] and [bcc] list of recipients for your reply.
 */
create-event:sephia._internals.get-reply-data

  /*
   * Making sure invoker obeys by lambda contract.
   */
  micro.lambda.contract.min:x:/..
    _arg:long
  micro.lambda.contract.optional:x:/..
    all:bool

  /*
   * Selecting email data from MySQL.
   */
  p5.mysql.connect:[sephia]
    p5.mysql.select:@"select subject, babelsubject, mimeid, email from emails inner join contacts on emails.sender = contacts.id where emails.id = @id"
      @id:x:/../*/_arg?value
    p5.mysql.select:@"select content, type from parts where emailid = @id"
      @id:x:/../*/_arg?value

    /*
     * Making sure subject starts with "Re:".
     */
    if
      fetch:x:/0/0?value
        index-of:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value
          src:"Re:"
      !=:int:0

      /*
       * Subject didn't start with "Re:", prepending "Re: " in front of it.
       */
      set:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value
        src:"Re: {0}"
          :x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value

    /*
     * Making sure "babel subject" starts with "Re:", but only if it actually exists.
     */
    if:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value
      and
        fetch:x:/0/0?value
          index-of:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value
            src:"Re:"
        !=:int:0

      /*
       * Babel subject didn't start with "Re:", prepending "Re: " in front of it.
       */
      set:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value
        src:"Re: {0}"
          :x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value

    /*
     * Making sure we return subject, and if it exists also babel subject.
     */
    eval-x:x:/+/*/*
    add:x:/../*/return
      src
        subject:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value
    if:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value
      eval-x:x:/+/*/*
      add:x:/../*/return
        src
          babelsubject:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value

    /*
     * Will contain the "massaged content" from email.
     */
    _content

    /*
     * Removing signature from email's content, and trimming it afterwards.
     */
    set:x:/@_content?value
      fetch:x:/0/0?name
        split:x:/..p5.mysql.connect/*/p5.mysql.select/[1,2]/*/*/type/=plain/./*/content?value
          =:"\r\n-- \r\n"
    set:x:/@_content?value
      trim:x:/@_content?value

    /*
     * Quoting content of email by appending a ">" in front of each line in email content.
     */
    replace:x:/@_content?value
      src:"\r\n"
      dest:"\r\n> "
    set:x:/@_content?value
      src:"> {0}"
        :x:/@replace?value

    /*
     * HTML encoding content.
     */
    set:x:/@_content?value
      p5.html.html-encode:x:/@_content?value

    /*
     * Making sure we return content.
     */
    eval-x:x:/+/*/*
    add:x:/../*/return
      src
        content:x:/@_content?value

    /*
     * Adding "To" recipient.
     */
    add:x:/+/*/*
      src:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/email?value
    add:x:/../*/return
      src
        to

    /*
     * Checking if this is a "reply to all".
     */
    if:x:/../*/all?value

      /*
       * Reply to all operation, making sure we return all [cc] and [bcc] recipients as well.
       *
       * But first making sure our return invocation has the necessary fields.
       */
      add:x:/../*/return
        src
          cc
          bcc

      /*
       * Then selecting all original recipients for email.
       */
      p5.mysql.select:@"select type, contacts.email from recipients inner join contacts on recipients.contactid = contacts.id where recipients.emailid = @id"
        @id:x:/../*/_arg?value
      for-each:x:/@p5.mysql.select/*
        if:x:/@_dp/#/*/type/=To
          add:x:/../*/return/*/to
            src:x:/@_dp/#/*/email?value
        else-if:x:/@_dp/#/*/type/=Cc
          add:x:/../*/return/*/cc
            src:x:/@_dp/#/*/email?value
        else-if:x:/@_dp/#/*/type/=Bcc
          add:x:/../*/return/*/bcc
            src:x:/@_dp/#/*/email?value

      /*
       * Removing "self" from recipients.
       */
      p5.auth.my-settings.get
      set:x:/../*/return/*(/cc|/bcc|/to)/*/{0}
        :x:/@p5.auth.my-settings.get/*/sephia/*/email?value

      /*
       * Removing all unused fields.
       */
      set:x:/../*/return/*((/cc!/cc/*/.)|(/bcc!/bcc/*/.))

  /*
   * Returning results to caller.
   */
  return
