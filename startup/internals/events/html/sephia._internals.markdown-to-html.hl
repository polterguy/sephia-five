
/*
 * Creates standard email HTML from the given [_arg] Markdown content.
 *
 * This implies among other things, wrapping the signature of your email into a <pre></pre> HTML snippet,
 * making all URLs become hyperlinks, in addition to converting the content of email to HTML by assuming it's Markdown.
 */
create-event:sephia._internals.markdown-to-html

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    _arg:string

  /*
   * Splitting up signature, such that we can have it displayed as pre-formatted.
   */
  split:x:/../*/_arg?value
    =:"\r\n-- \r\n"

  /*
   * Used to hold the content of email.
   */
  _body

  /*
   * Checking if there was a signature in email, and if so, making sure
   * we wrap it into a "<pre>" declaration, with some styling.
   */
  if:x:/@split/*?count
    >:int:1

    /*
     * There was a signature in email's content.
     *
     * Notice, in case user has for some weird reasons typed in statically into
     * his email "\r\n-- \r\n", we actually join everything we [split] further up,
     * except the last split result.
     */
    set:x:/@_body?value
      join:x:/@split/*(!/./0/-)?name
        sep:"\r\n-- \r\n"

    /*
     * Adding signature to end of [_body].
     */
    set:x:/@_body?value
      src:"{0} \r\n<pre style=\"opacity:.3;\">-- \r\n{1}</pre>"
        :x:/@_body?value
        :x:/@split/0/-?name

  else

    /*
     * There was no signature in email's content.
     */
    set:x:/@_body?value
      src:x:/../*/_arg?value

  /*
   * Converting content of email to Markdown.
   */
  markdown2html:x:/@_body?value
    root-url:@SEPHIA/

  /*
   * Converting HTML semantically to lambda, to be able to intelligently parse it.
   */
  html2lambda:x:/@markdown2html?value

  /*
   * Making sure any videos and images are styled nicely.
   */
  for-each:x:/@html2lambda/**(/img|/video)
    add:x:/@_dp/#
      src
        @style:"border-radius:5px;box-shadow:3px 3px 5px rgba(0,0,0,.5);margin-left:auto;margin-right:auto;display:block;max-width:calc(100% - 10px);"

  /*
   * Running through each hyperlink that doesn't have a [@target], and making
   * sure it gets a '_blank' target.
   */
  for-each:x:/@html2lambda/**(/a!/a/*/\@target/.)
    add:x:/@_dp/#
      src
        @target:_blank

  /*
   * Running through each hyperlink, and making sure every hyperlink displays its
   * actual domain as a part of its anchor text, in addition to a rel="noreferrer" 
   * attribute.
   *
   * Notice, this is a security feature, that significantly reduces an adversary's 
   * chances of success!
   *
   * In addition, we add up an explicit rel='noreferrer' to all hyperlinks, to
   * make sure any links visited, never knows the origin of the visitor, and which
   * website the visitor comes from.
   *
   * This is basically "super defensive coding" in practive!!
   */
  for-each:x:/@html2lambda/**/a
    split:x:/@_dp/#/*/\@href?value
      =:"://"
    split:x:/@split/0/-?name
      =:/
    set:x:/@_dp/#/*/\#text?value
      src:{0} (<strong>{1}</strong>)
        :x:/@_dp/#/*/\#text?value
        :x:/@split/0?name

    /*
     * Removing any previous "rel" attributes, before we add our own.
     */
    set:x:/@_dp/#/*/rel
    add:x:/@_dp/#
      src
        @rel:noreferrer

  /*
   * Running through "whitelist", making sure that email does not contain malicious HTML elements.
   *
   * Basically, this will remove everything not found in our "/configuration/html-whitelist.hl" file.
   */
  load-file:@SEPHIA/configuration/html-whitelist.hl
  for-each:x:/@html2lambda/**
    if:x:/@load-file/*/*/\{0}
      :x:/@_dp/#?name
      not

      /*
       * HTML tag or attribute was not on whitelist, simply removing it.
       */
      set:x:/@_dp/#

  /*
   * Converting lambda back to HTML, now with styling for all images.
   */
  lambda2html:x:/@html2lambda/*

  /*
   * Converting all hyperlinks within email that are not explicitly set to hyperlinks to such.
   *
   * Notice, this invocation will ignore any hyperlinks already created by our above [markdown2html] invocation.
   */
  sephia._internals.html.create-hyperlinks:x:/@lambda2html?value

  /*
   * Returning HTML created above.
   */
  return:x:/@sephia._internals.html.create-hyperlinks?value
