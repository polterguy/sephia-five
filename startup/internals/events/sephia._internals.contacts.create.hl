
/*
 * Creates a contact from the given [name], [email] and [username] arguments, 
 * and returns the ID of the contact that was inserted.
 *
 * Optionally pass in [fingerprint], which is the fingerprint of the public PGP key
 * the contact should be created with.
 *
 * If you pass in [verified] and set its value to boolean "true", the contact will
 * be created as initially verified.
 *
 * Will attempt to find a public PGP key for contact, either in GnuPG database, or using key server.
 * Notice, expects an open database connection to the Sephia database.
 */
create-event:sephia._internals.contacts.create

  /*
   * Making sure invoker obeys by lambda contract.
   */
  micro.lambda.contract.min:x:/..
    name:string
    email:string
    username:string

  /*
   * Sanity checking optional arguments.
   */
  micro.lambda.contract.optional:x:/..
    fingerprint:string
    verified:bool

  /*
   * Making sure name defaults to first parts of email, if it is empty or null.
   */
  if:x:/../*/name?value
    =:
    split:x:/../*/email?value
      =:@
    set:x:/../*/name?value
      src:x:/@split/0?name

  /*
   * Used to hold any fingerprints of public PGP key matching email.
   */
  _fingerprint

  /*
   * Checking if there exists a public PGP key for user in GnuPG database.
   */
  p5.crypto.list-public-keys:x:(/../*/fingerprint|/../*/email)/[0,1]?value
  if:x:/-/*?count
    >:int:0

    /*
     * We found a potentially matching key for contact in GnuPG database.
     */
    set:x:/@_fingerprint?value
      src:x:/@p5.crypto.list-public-keys/0?name

  else-if:x:/../*/fingerprint?value

    /*
     * Caller supplied a [fingerprint] argument, attempting to download key from key server.
     * Making sure we wrap our logic in a try/catch block.
     */
    try
      sephia.pgp.key-server.download-key:x:/../*/fingerprint?value
      p5.crypto.import-public-pgp-key:x:/@sephia.pgp.key-server.download-key?value

      /*
       * Making sure our downloaded key actually matched the specified [fingerprint] argument, before
       * we start using it.
       */
      if:x:/@p5.crypto.import-public-pgp-key/*?name
        =:x:/../*/fingerprint?value
        set:x:/@_fingerprint?value
          src:x:/@p5.crypto.import-public-pgp-key/0?name

    catch

      /*
       * Silently catching, since we might be on another thread.
       */

  else

    /*
     * No matching key in GnuPG, and no fingerprint was given.
     * Trying to search on key server, making sure we wrap
     * our attempt into a try/catch block.
     */
    try
      sephia.pgp.key-server.search:x:/../*/email?value
      if:x:/@sephia.pgp.key-server.search/*?count
        >:int:0

        /*
         * We found a key on key server, downloading it, and importing it into GnuPG database.
         */
        sephia.pgp.key-server.download-key:x:/@sephia.pgp.key-server.search/0?value
        p5.crypto.import-public-pgp-key:x:/@sephia.pgp.key-server.download-key?value
        set:x:/@_fingerprint?value
          src:x:/@p5.crypto.import-public-pgp-key/0?name

    catch

      /*
       * Silently catching, since invocation might be from a different thread.
       */

  /*
   * We always store fingerprint as UPPER in database.
   */
  if:x:/@_fingerprint?value
    set:x:/@_fingerprint?value
      to-upper:x:/@_fingerprint?value

  /*
   * Checking if caller requested contact to be initially created as a verified contact.
   */
  if:x:/../*/verified?value
    and:x:/@_fingerprint?value

    /*
     * We have a fingerprint for contact, and caller requested that contact be created
     * as initially verified - Hence, we set status of contact to verified.
     */
    set:x:/../*/p5.mysql.insert/*/\@isverified?value
      src:1

  /*
   * Inserting new contact into database.
   */
  p5.mysql.insert:@"insert into contacts (name, email, username, fingerprint, isverified) values (@name, @email, @username, @fingerprint, @isverified)"
    @name:x:/../*/name?value
    @email:x:/../*/email?value
    @username:x:/../*/username?value
    @fingerprint:x:/@_fingerprint?value
    @isverified:0

  /*
   * Returning newly inserted contact to caller.
   */
  eval-x:x:/+/*
  return
    id:x:/@p5.mysql.insert/*/id?value
    name:x:/../*/name?value
    email:x:/../*/email?value
    username:x:/../*/username?value
    fingerprint:x:/@_fingerprint?value
  
