﻿﻿﻿﻿
/*
 * Creates a contact from the given [name], [email] and [username] arguments, 
 * and returns the ID, and all other properties of the contact that was inserted.
 *
 * Optionally pass in [fingerprint], which is the fingerprint of the public PGP key
 * the contact should initially be created with.
 *
 * If you pass in a [fingerprint] and [verified], and set [verified]'s value to 
 * boolean "true", the contact will be created as initially verified.
 *
 * You can also optionally pass in [spam], which can be either "0" or "1", where "0" 
 * means that the contact is to be inserted as not spam, and "1" means that the 
 * contact is to be inserted initially as a "spam" contact.
 *
 * If you don't pass in [spam], then the spam filters in Sephia will try to 
 * determine if emails from the contact are to be considered spam or not.
 *
 * Will attempt to find a public PGP key for contact, either in GnuPG database, 
 * or using key server, but only if a [fingerprint] is supplied.
 *
 * Notice, the event expects an open database connection to the Sephia database.
 */
create-event:sephia._internals.contacts.create

  /*
   * Making sure invoker obeys by lambda contract.
   */
  micro.lambda.contract.min:x:/..
    name:string
    email:string
    username:string

  /*
   * Sanity checking optional arguments.
   */
  micro.lambda.contract.optional:x:/..
    fingerprint:string
    verified:bool
    spam:int

  /*
   * Making sure name defaults to first parts of email, if it is empty or null.
   */
  if:x:/../*/name?value
    =:
    split:x:/../*/email?value
      =:@
    set:x:/../*/name?value
      src:x:/@split/0?name

  /*
   * Used to hold any fingerprints of public PGP key matching email.
   */
  _fingerprint

  /*
   * Checking if caller provided a [fingerprint] argument.
   */
  if:x:/../*/fingerprint?value

    /*
     * Attempting to find the given [fingerprint] key for the given [email].
     *
     * Notice, our invocation below, will return null if no key was found.
     *
     * Otherwise, it will return the [fingerprint] of the key that was successfully found.
     */
    eval-x:x:/+/*/*
    set:x:/@_fingerprint?value
      sephia.pgp.get-key
        email:x:/../*/email?value
        fingerprint:x:/../*/fingerprint?value

  /*
   * We always store fingerprint as UPPER case in our database.
   */
  if:x:/@_fingerprint?value
    set:x:/@_fingerprint?value
      to-upper:x:/@_fingerprint?value

  /*
   * Checking if caller requested contact to be initially created as a verified contact.
   */
  _is-verified:int:0
  if:x:/../*/verified?value
    and:x:/@_fingerprint?value

    /*
     * We have a fingerprint for contact, and caller requested that contact be created
     * as initially verified - Hence, we set status of contact to verified.
     */
    set:x:/@_is-verified?value
      src:1

  /*
   * Inserting new contact into database.
   */
  p5.mysql.insert:@"insert into contacts (name, email, username, fingerprint, isverified, spam) values (@name, @email, @username, @fingerprint, @isverified, @spam)"
    @name:x:/../*/name?value
    @email:x:/../*/email?value
    @username:x:/../*/username?value
    @fingerprint:x:/@_fingerprint?value
    @isverified:x:/@_is-verified?value
    @spam:x:/../*/spam?value

  /*
   * Returning newly inserted contact to caller.
   */
  eval-x:x:/+/*
  return
    id:x:/@p5.mysql.insert/*/id?value
    name:x:/../*/name?value
    email:x:/../*/email?value
    username:x:/../*/username?value
    fingerprint:x:/@_fingerprint?value
    is-verified:x:/@_is-verified?value
    spam:x:/../*/spam?value
