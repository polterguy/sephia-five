
/*
 * Given an ID to an email as [_arg], will return the reply data for email,
 * including wrapping original content inside of quoting, removing the signature,
 * and returning its [to] field.
 *
 * Optionally pass in [all], and set its value to boolean true, to have it also return
 * the [cc] and [bcc] list of recipients for your reply.
 *
 * Alternatively pass in [is-forward], which will return the data necessary to
 * forward the email, instead of replying to it.
 *
 * You can also pass in [attachments], at which case, the attachments from the 
 * original email will also be included in the reply data.
 */
create-event:sephia._internals.get-response-email-data

  /*
   * Making sure invoker obeys by lambda contract.
   */
  micro.lambda.contract.min:x:/..
    _arg:long
  micro.lambda.contract.optional:x:/..
    all:bool
    is-forward:bool
    attachments:bool

  /*
   * Selecting email data from MySQL.
   */
  p5.mysql.connect:[sephia]
    p5.mysql.select:@"select subject, babelsubject, mimeid, date, email, name from emails inner join contacts on emails.sender = contacts.id where emails.id = @id"
      @id:x:/../*/_arg?value
    p5.mysql.select:@"select content, type from parts where emailid = @id"
      @id:x:/../*/_arg?value

    /*
     * Checking if this is a "forward" operation.
     */
    if:x:/../*/is-forward?value
      not

      /*
       * Caller requested "reply data".
       */
      eval-x:x:/+/*/*/*
      add:x:/../*/return
        src
          headers
            In-Reply-To:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/mimeid?value

      /*
       * Making sure subject starts with "Re:".
       */
      if
        fetch:x:/0/0?value
          index-of:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value
            src:"Re:"
        !=:int:0

        /*
         * Subject didn't start with "Re:", prepending "Re: " in front of it.
         */
        set:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value
          src:"Re: {0}"
            :x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value

      /*
       * Making sure "babel subject" starts with "Re:", but only if it actually exists.
       */
      if:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value
        and
          fetch:x:/0/0?value
            index-of:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value
              src:"Re:"
          !=:int:0

        /*
         * Babel subject didn't start with "Re:", prepending "Re: " in front of it.
         */
        set:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value
          src:"Re: {0}"
            :x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value

      /*
       * Making sure we return subject, and if it exists also babel subject.
       */
      eval-x:x:/+/*/*
      add:x:/../*/return
        src
          subject:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value
      if:x:/@p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value
        eval-x:x:/+/*/*
        add:x:/../*/return
          src
            babelsubject:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/babelsubject?value

    else

      /*
       * This is a forward operation.
       *
       * Making sure subject starts with "Fwd:".
       */
      if
        fetch:x:/0/0?value
          index-of:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value
            src:"Fwd:"
        !=:int:0

        /*
         * Subject didn't start with "Fwd:", prepending "Fwd: " in front of it.
         */
        set:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value
          src:"Fwd: {0}"
            :x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value

      /*
       * Making sure we return subject.
       */
      eval-x:x:/+/*/*
      add:x:/../*/return
        src
          subject:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/subject?value

    /*
     * Will contain the "massaged content" from email.
     */
    _content

    /*
     * Removing signature from email's content, and trimming it afterwards.
     */
    set:x:/@_content?value
      fetch:x:/0/0?name
        split:x:/..p5.mysql.connect/*/p5.mysql.select/[1,2]/*/*/type/=plain/./*/content?value
          =:"\r\n-- \r\n"
    set:x:/@_content?value
      trim:x:/@_content?value

    /*
     * Quoting content of email by appending a ">" in front of each line in email content.
     */
    replace:x:/@_content?value
      src:"\r\n"
      dest:"\r\n> "
    set:x:/@_content?value
      src:"> {0}"
        :x:/@replace?value

    /*
     * Checking if this is a "forward operation", at which case we append the
     * original sender's email address, and the date the email was sent, making
     * sure it becomes pre-formatted when turned into HTML.
     */
    if:x:/../*/is-forward?value

      /*
       * Forwarding operation.
       */
      p5.types.date.format:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/date?value
        format:"ddd d. MMM yyyy, HH:mm"
      set:x:/@_content?value
        src:@"


```
--------- Forwarded message -----------
Originally sent by: {0} - {1}
Date: {2}
--------- Forwarded message -----------
```

{3}"
          :x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/name?value
          :x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/email?value
          :x:/@p5.types.date.format?value
          :x:/@_content?value

    /*
     * HTML encoding content.
     */
    set:x:/@_content?value
      p5.html.html-encode:x:/@_content?value

    /*
     * Making sure we return content.
     */
    eval-x:x:/+/*/*
    add:x:/../*/return
      src
        content:x:/@_content?value

    /*
     * Adding recipients, but only if this is not a "forward operation".
     */
    if:x:/../*/is-forward?value
      not

      /*
       * Caller did not request "forward data".
       */
      add:x:/+/*/*
        src:x:/..p5.mysql.connect/*/p5.mysql.select/[0,1]/*/*/email?value
      add:x:/../*/return
        src
          to

      /*
       * Checking if this is a "reply to all".
       */
      if:x:/../*/all?value

        /*
         * Reply to all operation, making sure we return all [cc] and [bcc] recipients as well.
         *
         * But first making sure our return invocation has the necessary fields.
         */
        add:x:/../*/return
          src
            cc
            bcc

        /*
         * Then selecting all original recipients for email.
         */
        p5.mysql.select:@"select type, contacts.email from recipients inner join contacts on recipients.contactid = contacts.id where recipients.emailid = @id"
          @id:x:/../*/_arg?value
        for-each:x:/@p5.mysql.select/*
          if:x:/@_dp/#/*/type/=To
            add:x:/../*/return/*/to
              src:x:/@_dp/#/*/email?value
          else-if:x:/@_dp/#/*/type/=Cc
            add:x:/../*/return/*/cc
              src:x:/@_dp/#/*/email?value
          else-if:x:/@_dp/#/*/type/=Bcc
            add:x:/../*/return/*/bcc
              src:x:/@_dp/#/*/email?value

        /*
         * Removing "self" from recipients.
         */
        p5.auth.my-settings.get
        set:x:/../*/return/*(/cc|/bcc|/to)/*/{0}
          :x:/@p5.auth.my-settings.get/*/sephia/*/email?value

        /*
         * Removing all unused fields.
         */
        set:x:/../*/return/*((/cc!/cc/*/.)|(/bcc!/bcc/*/.))

    /*
     * Checking if we should add attachments to respond data.
     */
    if:x:/../*/attachments?value

      /*
       * Caller requested to also have attachments included.
       */
      p5.mysql.select:@"select filename, prefix, folder from attachments where emailid = @id"
        @id:x:/../*/_arg?value

      /*
       * Notice, to get the filename(s) correct, we'll need to copy the attachments to
       * the user's "tmp" attachment folder.
       *
       * Looping through each attachment, and copying to user's "tmp" attachment folder.
       */
      for-each:x:/@p5.mysql.select/*/*/filename(!/=signature.pgp)/.

        /*
         * Checking if another file with the same exists from before, and if so,
         * deleting it.
         */
        if
          fetch:x:/0/0?value
            file-exists:{0}{1}
              :@SEPHIA-USER-ATTACHMENTS/tmp/
              :x:/@_dp/#/*/filename?value

          /*
           * File with the same filename already exists in user's "tmp" 
           * attachment folder, deleting it.
           */
          delete-file:{0}{1}
            :@SEPHIA-USER-ATTACHMENTS/tmp/
            :x:/@_dp/#/*/filename?value

        /*
         * Copying file to user's "tmp" attachment folder.
         */
        copy-file:{0}{1}{2}
          :x:/@_dp/#/*/folder?value
          :x:/@_dp/#/*/prefix?value
          :x:/@_dp/#/*/filename?value
          dest:{0}{1}
            :@SEPHIA-USER-ATTACHMENTS/tmp/
            :x:/@_dp/#/*/filename?value

        /*
         * Making sure we return the [attachment] node for the currently iterated
         * attachment.
         */
        eval-x:x:/+/*/*
        add:x:/../*/return
          src
            attachment:{0}{1}
              :@SEPHIA-USER-ATTACHMENTS/tmp/
              :x:/@_dp/#/*/filename?value

  /*
   * Returning results to caller.
   */
  return
