
/*
 * Extension widget that creates the widget that displays the body of an email.
 *
 * Expects [row] from "parts" MySQL table, which it will intelligently parse, and return either
 * an iframe for or a pre-formatted div for, depending upon which views that exists, and which
 * type of view user prefers according to his settings.
 *
 * If email is rendered as HTML, all potential malicious HTML tags are stripped according to
 * the whitelist definition that can be found in "/config/html-whitelist.hl".
 *
 * If email is rendered as plain text, then content is HTML encoded to avoid injecting malicious HTML,
 * but all URLs in email is converted into clickable hyperlinks.
 */
create-event:sephia._internals.widgets.email-body

  /*
   * Signal node, to be able to easily find arguments.
   */
  .signal

  /*
   * Retrieving user's settings to figure out which type of email content he prefers.
   */
  _type
  p5.auth.my-settings.get
  if:x:/@p5.auth.my-settings.get/*/sephia/*/preferred-content-type?value
    =:html
    and:x:/@.signal/--(!/_arg)/*/type/=html

    /*
     * User prefers HTML emails, and there exists an HTML view for email.
     */
    set:x:/@_type?value
      src:html

  else-if:x:/@p5.auth.my-settings.get/*/sephia/*/preferred-content-type?value
    =:plain
    and:x:/@.signal/--(!/_arg)/*/type/=plain

    /*
     * User prefers plain text emails, and there exists a plain text view for email.
     */
    set:x:/@_type?value
      src:plain

  else-if:x:/@.signal/--(!/_arg)/*/type/=html

    /*
     * User prefers plain text emails, but only HTML exists.
     */
    set:x:/@_type?value
      src:html

  else-if:x:/@.signal/--(!/_arg)/*/type/=plain

    /*
     * User prefers HTML emails, but only plain text exists.
     */
    set:x:/@_type?value
      src:plain

  else

    /*
     * We have no idea how to display this email...!!
     */
    return
      literal
        element:div
        innerValue:@"<p>Sephia Five couldn't display this email, since it container neither any HTML nor plain text views!</p>"

  /*
   * Figuring out if there exists an HTML view, which we will prioritize.
   */
  if:x:/@_type?value
    =:html

    /*
     * Rendering HTML view, making sure we eliminate any dangerous JavaScript first.
     */
    html2lambda:x:/@.signal/--(!/_arg)/*/type/=html/./*/content?value

    /*
     * Removing everything not in whitelist.
     *
     * This is done by dynamically creating an expression that removes everything from our above [html2lambda]
     * object, which is not explicitly mentioned in our "html-whitelist.hl" configuration file.
     */
    _exp:/@html2lambda/**(
    load-file:@SEPHIA/config/html-whitelist.hl

    /*
     * Looping through each item in whitelist.
     */
    for-each:x:/-/*/*

      /*
       * Appending this node as a "not to be removed" type of node the the above [_exp].
       */
      set:x:/@_exp?value
        src:{0}!/\{1}
          :x:/@_exp?value
          :x:/@_dp/#?name

    /*
     * Adding our trailing parantheses ")" to the above dynamically created expression.
     */
    set:x:/@_exp?value
      src:{0})
        :x:/@_exp?value

    /*
     * Transforming our above [_exp] to an expression, and setting the results as the value of our second
     * [set] below.
     */
    set:x:/+?value
      src:x:/@_exp?value.x

    /*
     * This invocation, which is dynamically created, and will remove everything not in our whitelist.
     */
    set

    /*
     * Making sure we get "_blank" target for each hyperlink, unless another target is explicitly defined.
     */
    add:x:@"/@html2lambda/*/**/a"
      src
        @target:_blank

    /*
     * Making sure we include our default CSS stylesheet file for viewing HTML emails.
     */
    p5.io.unroll-path:@SEPHIA/
    p5.io.unroll-path:@MICRO/
    eval-x:x:/+/*/*/*
    insert-before:x:/@html2lambda(/**/head/0(!/~@)|/0)/[0,1]
      src
        link
          @rel:stylesheet
          @type:text/css
          @href:"{0}media/main.css"
            :x:/@p5.io.unroll-path?value
        link
          @rel:stylesheet
          @type:text/css
          @href:"{0}media/skins/serious.css"
            :x:/@p5.io.unroll-path?value
        link
          @rel:stylesheet
          @type:text/css
          @href:"{0}media/email-reader.css"
            :x:/@p5.io.unroll-path/@p5.io.unroll-path?value

    /*
     * Transforming back to HTML.
     */
    lambda2html:x:/@html2lambda/*

    /*
     * Returning extension widget wrapping "iframe" back to caller.
     */
    eval-x:x:/+/*/*
    return
      literal
        element:iframe
        seamless
        class:sephia-iframe-reader

        // Making sure iframe's height becomes "automatic".
        onload:@"this.style.height=this.contentWindow.document.body.scrollHeight + 'px';"
        srcdoc:x:/@lambda2html?value

  else

    /*
     * HTML encoding email to avoid HTML tag injection.
     */
    p5.html.html-encode:x:/@.signal/--(!/_arg)/*/type/=plain/./*/content?value

    /*
     * Making sure we transform all URLs in email to become clickable hyperlinks.
     */
    sephia._internals.html.create-hyperlinks:x:/@p5.html.html-encode?value

    /*
     * Returning pre-formatted "div" element wrapping content of email.
     */
    eval-x:x:/+/*/*
    return
      literal
        element:div
        style:"white-space:pre-wrap;width:100%;overflow:hidden;"
        innerValue:x:/@sephia._internals.html.create-hyperlinks?value
