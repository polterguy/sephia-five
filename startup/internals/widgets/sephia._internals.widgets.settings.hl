
/*
 * Creates our "settings" widget.
 *
 * Will create a settings form, from where the user can change his personal 
 * settings, such as his POP3 server, username, password, etc.
 *
 * Pass in [wizard-mode] and set its value to boolean "true" if you wish to show
 * the widget in "wizard mode", having a "Next" button, instead of a "Close" and
 * "Save" buttons.
 */
create-event:sephia._internals.widgets.settings

  micro.lambda.contract.optional:x:/..
    wizard-mode:bool

  /*
   * Retrieving settings and setting initial values.
   */
  p5.auth.my-settings.get

  /*
   * Verifying key user has declared to use in his settings actually exists, and if not, 
   * removing it from settings object, such that it doesn't become saved in user's settings.
   *
   * Otherwise it would be impossible to remove a key that doesn't exist in GnuPG database.
   */
  p5.crypto.list-private-keys:x:/@p5.auth.my-settings.get/*/sephia/*/pgp-key?value
  if:x:/-/*?count
    =:int:0
    set:x:/@p5.auth.my-settings.get/*/sephia/*/pgp-key
    set:x:/@p5.auth.my-settings.get/*/sephia/*/pgp-password

  /*
   * Default values for settings.
   *
   * Notice, we're simply using GMail server settings here.
   * The [signature] we're fetching from our configuration file.
   */
  load-file:@SEPHIA/configuration/default-user-settings.hl
  eval-x:x:/+/*
  .defaults
    pop3-server:x:/@load-file/*/*/pop3-server?value
    pop3-port:x:/@load-file/*/*/pop3-port?value
    pop3-ssl:x:/@load-file/*/*/pop3-ssl?value
    smtp-server:x:/@load-file/*/*/smtp-server?value
    smtp-port:x:/@load-file/*/*/smtp-port?value
    smtp-ssl:x:/@load-file/*/*/smtp-ssl?value
    markdown:x:/@load-file/*/*/markdown?value
    pgp-subjects:x:/@load-file/*/*/pgp-subjects?value
    skin:x:/@load-file/*/*/skin?value
    signature:x:/@load-file/*/*/signature?value
    pgp-key-password:x:/@load-file/*/*/pgp-key-password?value
    hollywood-spam-filter:bool:false
    signature-spam-filter:bool:false
    cryptography-spam-filter:bool:false

  /*
   * Populating skin selector.
   */
  list-files:@MICRO/media/skins/
    filter:.css
  for-each:x:/@list-files/*?name
    split:x:/@_dp?value
      =:/
      =:.
    if:x:/@split/0/-2?name
      =:x:(/../*/p5.auth.my-settings.get/*/sephia/*/skin|/@.defaults/*/skin)/$?value
      add:x:/././*/add/*/*
        src:selected
    eval-x:x:/+/*/*/*
    add:x:/../*/return/**/widgets/=skins
      src
        literal
          element:option
          innerValue:x:/@split/0/-2?name

  /*
   * Making sure we check the correct "perferred content type" radio button.
   */
  add:x:/../*/return/**/input/*/type/=radio/./*/.data-field/=preferred-content-type/./*/.data-value/={0}/.
    :x:(/../*/p5.auth.my-settings.get/*/sephia/*/preferred-content-type|/../*/.defaults/*/preferred-content-type)/$?value
    src
      checked

  /*
   * Checking if user wants to compose emails using Markdown.
   */
  if:x:(/../*/p5.auth.my-settings.get/*/sephia/*/markdown|/../*/.defaults/*/markdown)/$?value
    add:x:/../*/return/**/input/*/type/=checkbox/./*/.data-field/=markdown/.
      src:checked

  /*
   * Checking the correct spam filters according to user's settings, 
   * or alternatively use the [.defaults] values.
   */
  if:x:(/../*/p5.auth.my-settings.get/*/sephia/*/hollywood-spam-filter|/../*/.defaults/*/hollywood-spam-filter)/$?value
    add:x:/../*/return/**/input/*/type/=checkbox/./*/.data-field/=hollywood-spam-filter/.
      src:checked
  if:x:(/../*/p5.auth.my-settings.get/*/sephia/*/signature-spam-filter|/../*/.defaults/*/signature-spam-filter)/$?value
    add:x:/../*/return/**/input/*/type/=checkbox/./*/.data-field/=signature-spam-filter/.
      src:checked
  if:x:(/../*/p5.auth.my-settings.get/*/sephia/*/cryptography-spam-filter|/../*/.defaults/*/cryptography-spam-filter)/$?value
    add:x:/../*/return/**/input/*/type/=checkbox/./*/.data-field/=cryptography-spam-filter/.
      src:checked

  /*
   * Checking if caller invoked us with "wizard-mode" or not.
   */
  if:x:/../*/wizard-mode?value.bool

    /*
     * Wizard mode is turned on, making both our save and close button invisible.
     */
    add:x:/../*/return/**/button(/=sephia-settings-close|/=sephia-settings-save)
      src
        visible:false

  else

    /*
     * Wizard mode is turned off.
     */
    add:x:/../*/return/**/button/=sephia-settings-next
      src
        visible:false

  /*
   * Returning widget to caller, making sure we forward evaluate properties.
   */
  eval-x:x:/+2/**/micro.widgets.wizard-form/*/text/*/.data-field(/=password|/=password-repeat)/./*/value
  eval-x:x:/+/**/view/=databound/**/.data-field/./*/value|/+/**/input(/=sephia-settings-pgp-key|/=sephia-settings-pgp-password|/=sephia-settings-subject-generator)/*/value
  return
    container
      class:sephia-settings
      widgets

        /*
         * Hidden input element that stores the selected private PGP key's fingerprint.
         */
        input:sephia-settings-pgp-key
          type:hidden
          .data-field:pgp-key
          value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/pgp-key|/../*/.defaults/*/pgp-key)/$?value

        /*
         * Using a Micro tab widget to organize the different groups of settings.
         */
        micro.widgets.tab:sephia-settings-tab
          class:micro-tab micro-tab-border

          /*
           * Misc. settings, name, email and signature.
           */
          view:databound
            name:Misc
            widgets
              div
                class:row
                widgets
                  div
                    class:col
                    widgets
                      label
                        innerValue:Name and email
              div
                class:row
                widgets
                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            for:sephia-settings-name
                            innerValue:Your name
                          input:sephia-settings-name
                            .data-field:name
                            type:text
                            placeholder:Your name ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/name|/../*/.defaults/*/name)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                            oninit
                              micro.page.set-focus:sephia-settings-name
                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            for:sephia-settings-email
                            innerValue:Your email
                          input:sephia-settings-email
                            .data-field:email
                            type:text
                            placeholder:Your email ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/email|/../*/.defaults/*/email)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"

              div
                class:row air-top
                widgets
                  div
                    class:col
                    widgets
                      label
                        for:sephia-settings-signature
                        innerValue:Signature
                      literal:sephia-settings-signature
                        .data-field:signature
                        class:fill
                        element:textarea
                        placeholder:Signature ...
                        rows:7
                        value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/signature|/../*/.defaults/*/signature)/$?value
              div
                class:row
                widgets
                  div
                    class:col
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            for:sephia-settings-skin
                            innerValue:Theme
                          select:sephia-settings-skin
                            .data-field:skin
                            widgets:skins
              div
                class:row
                widgets
                  div
                    class:col
                    widgets
                      input:sephia-settings-compose-markdown
                        type:checkbox
                        .data-field:markdown
                      label
                        for:sephia-settings-compose-markdown
                        innerValue:Use Markdown
                        title:Attempt to convert content of emails into Markdown when reading emails, if possible

          /*
           * POP3 settings.
           */
          view:databound
            name:POP3
            widgets
              div
                class:row
                widgets
                  div
                    class:col
                    widgets
                      label
                        innerValue:POP3 server settings
              div
                class:row
                widgets
                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Server
                            for:sephia-settings-pop3-server
                          input:sephia-settings-pop3-server
                            .data-field:pop3-server
                            type:text
                            placeholder:Server ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/pop3-server|/../*/.defaults/*/pop3-server)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                            oninit
                              micro.page.set-focus:sephia-settings-pop3-server
                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Port
                            for:sephia-settings-pop3-port
                          input:sephia-settings-pop3-port
                            type:number
                            .data-field:pop3-port
                            placeholder:Port ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/pop3-port|/../*/.defaults/*/pop3-port)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                          label
                            for:sephia-settings-pop3-ssl
                            innerValue:SSL
                          span
                            widgets
                              input:sephia-settings-pop3-ssl
                                .data-field:pop3-ssl
                                type:checkbox
                                checked
              div
                class:row air-top
                widgets
                  div
                    class:col
                    widgets
                      label
                        innerValue:POP3 username/password
              div
                class:row
                widgets
                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Username
                            for:sephia-settings-pop3-username
                          input:sephia-settings-pop3-username
                            .data-field:pop3-username
                            type:text
                            placeholder:Username ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/pop3-username|/../*/.defaults/*/pop3-username)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                            oninit

                              /*
                               * Defaulting POP3 username to email, unless it already has a value.
                               */
                              get-widget-property:x:/../*/_event?value
                                value
                              if:x:/@get-widget-property/*/*?value
                                not
                                get-widget-property:sephia-settings-email
                                  value
                                set-widget-property:x:/../*/_event?value
                                  value:x:/@get-widget-property/*/*?value

                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Password
                            for:sephia-settings-pop3-password
                          input:sephia-settings-pop3-password
                            type:password
                            autocomplete:new-password
                            .data-field:pop3-password
                            placeholder:Password ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/pop3-password|/../*/.defaults/*/pop3-password)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                  div
                    class:col-100
                    oninit

                      /*
                       * Needed to avoid notifying user multiple times about enabling 
                       * POP3 settings for GMail, such as after ha has initially enabled
                       * POP3 access for GMail.
                       */
                      p5.auth.my-settings.get

                      /*
                       * Checking if POP3 server is pointing to GMail, and if not, making sure we
                       * set this widget's visibility property to "false".
                       */
                      get-widget-property:sephia-settings-pop3-server
                        value
                      if:x:/@get-widget-property/*/*?value
                        !=:pop.gmail.com

                        /*
                         * Hiding widget.
                         */
                        set-widget-property:x:/../*/_event?value
                          visible:false

                      else-if:x:/@p5.auth.my-settings.get/*/sephia
                        not

                        /*
                         * User hasn't created any settings previously, making sure we
                         * inform him of allowing POP3 access to GMail's POP3 server.
                         *
                         * Notifying user.
                         */
                        micro.windows.info:You'll probably have to turn on POP3 access for your GMail account
                          class:micro-windows-info success

                    widgets
                      p
                        widgets
                          a
                            href:"https://myaccount.google.com/lesssecureapps"
                            target:_blank
                            innerValue:Enable POP3 access to GMail

          /*
           * SMTP settings.
           */
          view:databound
            name:SMTP
            widgets
              div
                class:row
                widgets
                  div
                    class:col
                    widgets
                      label
                        innerValue:SMTP server settings
              div
                class:row
                widgets
                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Server
                            for:sephia-settings-smtp-server
                          input:sephia-settings-smtp-server
                            .data-field:smtp-server
                            type:text
                            placeholder:Server ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/smtp-server|/../*/.defaults/*/smtp-server)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                            oninit
                              micro.page.set-focus:sephia-settings-smtp-server
                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Port
                            for:sephia-settings-smtp-port
                          input:sephia-settings-smtp-port
                            type:number
                            .data-field:smtp-port
                            placeholder:Port ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/smtp-port|/../*/.defaults/*/smtp-port)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                          label
                            for:sephia-settings-smtp-ssl
                            innerValue:SSL
                          span
                            widgets
                              input:sephia-settings-smtp-ssl
                                .data-field:smtp-ssl
                                type:checkbox
                                checked
              div
                class:row air-top
                widgets
                  div
                    class:col
                    widgets
                      label
                        innerValue:SMTP username/password
              div
                class:row
                widgets
                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Username
                            for:sephia-settings-smtp-username
                          input:sephia-settings-smtp-username
                            .data-field:smtp-username
                            type:text
                            placeholder:Username ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/smtp-username|/../*/.defaults/*/smtp-username)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                            oninit

                              /*
                               * Defaulting SMTP username to POP3 username, unless it already has a value.
                               */
                              get-widget-property:x:/../*/_event?value
                                value
                              if:x:/@get-widget-property/*/*?value
                                not
                                get-widget-property:sephia-settings-pop3-username
                                  value
                                set-widget-property:x:/../*/_event?value
                                  value:x:/@get-widget-property/*/*?value

                  div
                    class:col-50
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Password
                            for:sephia-settings-smtp-password
                          input:sephia-settings-smtp-password
                            type:password
                            autocomplete:new-password
                            .data-field:smtp-password
                            placeholder:Password ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/smtp-password|/../*/.defaults/*/smtp-password)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                            oninit

                              /*
                               * Defaulting SMTP password to POP3 password, unless it already has a value.
                               */
                              get-widget-property:x:/../*/_event?value
                                value
                              if:x:/@get-widget-property/*/*?value
                                not
                                get-widget-property:sephia-settings-pop3-password
                                  value
                                set-widget-property:x:/../*/_event?value
                                  value:x:/@get-widget-property/*/*?value

          /*
           * Cryptography settings.
           */
          view
            name:Crypto
            widgets
              micro.widgets.grid:pgp-keys
                class:hover
                columns
                  User ID
                  Strength
                  Created
                  Expires
                oninit

                  /*
                   * Listing all private keys, and databinding our grid 
                   * towards all existing private keys from GnuPG database.
                   *
                   * Making sure we only list keys that have an "@" in their User IDs, to
                   * only list keys that seems to be intended for sending emails.
                   */
                  p5.crypto.list-private-keys:@

                  /*
                   * Hiding grid of keys and password wrapper if no private keys exists.
                   */
                  if:x:/@p5.crypto.list-private-keys/*?count
                    =:int:0

                    /*
                     * No private keys in GnuPG database.
                     */
                    set-widget-property:pgp-keys
                      visible:false
                    set-widget-property:sephia-settings-pgp-pwd-wrapper
                      visible:false
                    return

                  else

                    /*
                     * To be sure we re-display widgets again, we explicitly invoke set visible.
                     */
                    set-widget-property:pgp-keys
                      visible:true
                    set-widget-property:sephia-settings-pgp-pwd-wrapper
                      visible:true

                  /*
                   * Getting the details of all keys listed from above, which we will
                   * use when databinding the grid containing all private PGP keys, before
                   * we loop through each key and add it up to our databind invocation below.
                   */
                  p5.crypto.get-key-details:x:/@p5.crypto.list-private-keys/*?name
                  for-each:x:/-/*

                    /*
                     * To have a uniform way of displaying keys, we make sure they're always displayed as UPPERS.
                     */
                    set:x:/@_dp/#?name
                      to-upper:x:/@_dp/#?name

                    /*
                     * Adding item, and formatting both the creation and expires date nicely for
                     * displaying in our grid.
                     */
                    add:x:/../*/micro.widgets.grid.databind
                      src:item
                    p5.types.date.format:x:/@_dp/#/*/creation-time?value
                      format:"dd. MMM yyyy"
                    p5.types.date.format:x:/@_dp/#/*/expires?value
                      format:"dd. MMM yyyy"

                    /*
                     * User IDs normally contains angle brackets, hence we must HTML encode the User ID
                     * before we can display it to the user.
                     */
                    p5.html.html-encode:x:/@_dp/#/*/user-ids/0?value

                    /*
                     * Adding each cell to our grid, making sure we forward evaluate their values.
                     */
                    eval-x:x:/+/*/**
                    add:x:/../*/micro.widgets.grid.databind/0/-
                      src
                        User ID:x:/@p5.html.html-encode?value
                        Strength:x:/@_dp/#/*/strength?value
                        Created:x:/..for-each/*/p5.types.date.format/[0,1]?value
                        Expires:x:/..for-each/*/p5.types.date.format/[1,2]?value
                        .row
                          title:"Fingerprint:{0}"
                            :x:/@_dp/#?name

                    /*
                     * Making sure our grid rows becomes clickable.
                     */
                    eval-x:x:/+/*/*/*/*/_fingerprint
                    add:x:/../*/micro.widgets.grid.databind/0/-
                      src
                        .row

                          /*
                           * Handled to make sure we set the selected fingerprint into selected mode,
                           * if the user has previously selected a PGP key in this tab view.
                           *
                           * This is done by setting a hidden field's value to the fingerprint of the
                           * key the user has previously selected.
                           */
                          oninit

                            /*
                             * Forward evaluated above.
                             */
                            _fingerprint:x:/@_dp/#?name

                            /*
                             * Checking if this is the active PGP key.
                             */
                            get-widget-property:sephia-settings-pgp-key
                              value
                            if:x:/@get-widget-property/*/*?value
                              =:x:/@_fingerprint?value

                              /*
                               * Making sure "tr" row becomes "selected".
                               */
                              set-widget-property:x:/../*/_event?value
                                class:selected

                          /*
                           * Handled to make user able to select a PGP key
                           * by simply clicking the row associated with the key.
                           *
                           * The actual key fingerprint is stored in a hidden input 
                           * element in the tab control itself, with a [.data-field] such that
                           * when we later serialize form, we can easily retrieve the fingerprint
                           * of the selected key.
                           */
                          onclick

                            /*
                             * Forward evaluated above.
                             */
                            _fingerprint:x:/@_dp/#?name

                            /*
                             * Removing the "selected" class on all rows in grid.
                             */
                            p5.web.widgets.get-parent:x:/../*/_event?value
                            p5.web.widgets.get-children:x:/-/*/*?value
                            delete-widget-property:x:/-/*/*?value
                              class

                            /*
                             * Adding the "selected" class on currently clicked row.
                             */
                            set-widget-property:x:/../*/_event?value
                              class:selected

                            /*
                             * Settings the value of our hidden input field to the fingerprint
                             * of the currently clicked key.
                             */
                            set-widget-property:sephia-settings-pgp-key
                              value:x:/@_fingerprint?value

                  /*
                   * Now we can finally databind our grid towards the private 
                   * PGP keys in GnuPG storage.
                   */
                  micro.widgets.grid.databind:pgp-keys

              div:sephia-settings-pgp-pwd-wrapper
                class:row air-top
                widgets
                  div
                    class:col
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            for:sephia-settings-pgp-password
                            innerValue:Password
                          input:sephia-settings-pgp-password
                            .data-field:pgp-password
                            type:password
                            placeholder:Your PGP password ...
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/pgp-password|/../*/.defaults/*/pgp-key-password)/$?value
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
              div
                class:row
                widgets
                  div
                    class:col
                    widgets
                      div
                        class:strip fill
                        widgets
                          label
                            innerValue:Babelizers
                            for:sephia-settings-subject-generator
                          input:sephia-settings-subject-generator
                            type:text
                            .data-field:pgp-subjects
                            value:x:(/../*/p5.auth.my-settings.get/*/sephia/*/pgp-subjects|/../*/.defaults/*/pgp-subjects)/$?value
                            placeholder:A comma separated list of URLs from where random subjects will be generated ...
                            title:A comma separated list of URLs from where random subjects will be generated, to hide the original subject of encrypted emails.
                            onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-settings-next').raise('onclick');return false;}"
                            oninit

                              /*
                               * Setting initial focus to password for PGP key, to make navigation as
                               * "keyboard friendly" as possible.
                               */
                              micro.page.set-focus:x:/../*/_event?value
              div
                class:row
                widgets
                  div
                    class:col right
                    widgets
                      button
                        style:"margin-bottom:0;"
                        innerValue:Create new PGP key pair
                        onclick

                          /*
                           * Shows a modal window, allowing user to start creation of a new PGP keypair.
                           *
                           * Retrieving settings user has already filled out, to use as initial suggestion for
                           * name and email part of key-creation process.
                           */
                          p5.web.widgets.get-parent:sephia-settings-tab
                          micro.form.serialize:x:/-/*/*?value
                          eval-x:x:/+/*/*/*/micro.widgets.wizard-form/*/text/*/value
                          create-widgets
                            micro.widgets.modal:sephia-create-pgp-key-modal
                              class:micro-modal micro-modal-smaller
                              widgets
                                h3
                                  innerValue:Create new PGP keypair
                                p
                                  innerValue:@"Here you can create a new PGP key, which is necessary to be able to send encrypted emails, unless you have a PGP key from before.
Click the 'Advanced' button if you wish to control how your PGP key is created."
                                p
                                  innerValue:@"Notice, it can take several minutes to create a new PGP key. If you don't want to wait, you can just start the key creation process, 
save your settings, and do something else in the meantime, and come back here after some 5-30 minutes, depending upon what bit strength you have chosen for your key."
                                micro.widgets.wizard-form:sephia-create-new-pgp-key
                                  style:"display:none;"
                                  text:sephia-key-name
                                    .data-field:name
                                    info:Name
                                    value:x:/@micro.form.serialize/*/name?value
                                    oninit
                                      micro.page.set-focus:x:/../*/_event?value
                                  text:sephia-key-email
                                    .data-field:email
                                    info:Email
                                    value:x:/@micro.form.serialize/*/email?value
                                  text:sephia-key-password
                                    .data-field:password
                                    info:Password
                                    type:password
                                    autocomplete:new-password
                                    value:x:/../*/.defaults/*/pgp-key-password?value
                                  text:sephia-key-password-repeat
                                    .data-field:password-repeat
                                    info:Repeat
                                    type:password
                                    autocomplete:new-password
                                    value:x:/../*/.defaults/*/pgp-key-password?value
                                  label
                                    for:sephia-key-seed
                                    innerValue:Seed
                                  textarea:sephia-key-seed
                                    .data-field:seed
                                    info:Optional random text to seed the random number generator. Type in a random sequence of characters here ...
                                    oninit

                                      /*
                                       * Creating a default seed for our random number generator.
                                       */
                                      p5.crypto.create-random
                                        resolution:256
                                      set-widget-property:x:/../*/_event?value
                                        value:x:/@p5.crypto.create-random?value

                                  radio-group
                                    .data-field:strength
                                    options
                                      1024bit
                                        .data-value:1024
                                        title:Should only be used for testing purposes, but will be created very fast
                                      2048bit
                                        .data-value:2048
                                        title:Should only be used for testing purposes, but will be created fast
                                      4096bit
                                        .data-value:4096
                                        checked
                                        title:Recommended, but might take several minutes to create
                                      8192bit
                                        .data-value:8192
                                        title:Might take a very very long time to create. Only for the extremely paranoid with extreme security demands. Useless unless you provide a very long and very random seed!
                                  br
                                  checkbox
                                    .data-field:submit
                                    info:Submit public key to your key server
                                    checked
                                div
                                  class:right
                                  style:"clear:both;"
                                  widgets
                                    div
                                      class:strip
                                      style:"display:inline-block;"
                                      widgets

                                        /*
                                         * Button that will create the user's PGP keypair.
                                         */
                                        button
                                          innerValue:Create
                                          onclick

                                            /*
                                             * Serializing form data and using it to create a new PGP keypair.
                                             */
                                            micro.form.serialize:sephia-create-new-pgp-key

                                            /*
                                             * Verifying that passwords are a match.
                                             */
                                            if:x:/@micro.form.serialize/*/password?value
                                              !=:x:/@micro.form.serialize/*/password-repeat?value

                                              /*
                                               * Passwords didn't match.
                                               */
                                              p5.web.widgets.find-first-like
                                                class:micro-modal-content
                                              eval-x:x:/+/*
                                              micro.windows.info:Your passwords are not matching
                                                parent:x:/@p5.web.widgets.find-first-like/*/*?value
                                                class:micro-windows-info warning
                                              return

                                            /*
                                             * Verifying that a password was given.
                                             */
                                            if:x:/@micro.form.serialize/*/password?value
                                              =:

                                              /*
                                               * No password was given.
                                               */
                                              p5.web.widgets.find-first-like
                                                class:micro-modal-content
                                              eval-x:x:/+/*
                                              micro.windows.info:You must supply a password
                                                parent:x:/@p5.web.widgets.find-first-like/*/*?value
                                                class:micro-windows-info warning
                                              return

                                            /*
                                             * Forking a new thread, having PGP keypair created on worker thread.
                                             */
                                            add:x:/../*/fork/*/.settings
                                              src:x:/@micro.form.serialize/*
                                            fork

                                              /*
                                               * Settings for our keypair, added before fork is created.
                                               */
                                              .settings

                                              /*
                                               * Creating keypair.
                                               */
                                              p5.crypto.create-pgp-keypair
                                                identity:{0} <{1}>
                                                  :x:/@.settings/*/name?value
                                                  :x:/@.settings/*/email?value
                                                password:x:/@.settings/*/password?value
                                                seed:x:/@.settings/*/seed?value
                                                strength:x:/@.settings/*/strength?value

                                              /*
                                               * Submitting public key to Ubuntu's key server, but only if user told us to do so.
                                               */
                                              if:x:/@.settings/*/submit?value

                                                /*
                                                 * This even returns false if it was unsuccessful in submitting the key.
                                                 */
                                                eval-x:x:/+/*
                                                sephia.pgp.key-server.submit
                                                  fingerprint:x:/@p5.crypto.create-pgp-keypair/*/fingerprint?value
                                                if:x:/-?value
                                                  not

                                                  /*
                                                   * TODO: Implement some sort of cross threading general error support signal.
                                                   */

                                            /*
                                             * Deleting modal widget.
                                             */
                                            delete-widget:sephia-create-pgp-key-modal

                                            /*
                                             * Providing feedback to user.
                                             */
                                            create-widgets
                                              micro.widgets.modal:sephia-create-new-pgp-key-info
                                                class:micro-modal micro-modal-smaller
                                                widgets
                                                  h3
                                                    innerValue:Information
                                                  p
                                                    innerValue:@"Notice, this might take some few minutes, depending upon your key size. 
  Feel free to do something else in the meantime, and come back here later to see if it's done a couple of minutes from now."
                                                  div
                                                    class:right
                                                    widgets
                                                      button
                                                        innerValue:OK
                                                        oninit
                                                          micro.page.set-focus:x:/../*/_event?value
                                                        onclick
                                                          delete-widget:sephia-create-new-pgp-key-info

                                        /*
                                         * Button that will show the "Advanced settings" for creation of PGP key.
                                         */
                                        button
                                          innerValue:Advanced
                                          title:Allows you to parametrize your PGP key
                                          onclick

                                            /*
                                             * Deleting the style attribute for wizard widget, which should show the widget, 
                                             * and allow user to parametrize his PGP key.
                                             */
                                            delete-widget-property:sephia-create-new-pgp-key
                                              style
                                            set-widget-property:x:/../*/_event?value
                                              visible:false

                                        /*
                                         * Button that will close the modal widget.
                                         */
                                        button
                                          innerValue:Close
                                          title:Close window without creating a PGP keypair
                                          onclick

                                            /*
                                             * Simply closing modal widget.
                                             */
                                            delete-widget:sephia-create-pgp-key-modal

          /*
           * Spam filter settings.
           */
          view
            name:Spam
            widgets
              div
                class:row
                widgets
                  div
                    oninit

                      /*
                       * Settings focus to "Save" button.
                       */
                      micro.page.set-focus:sephia-settings-save

                    class:col
                    widgets
                      input:sephia-settings-holloywood-spam-filter
                        type:checkbox
                        .data-field:hollywood-spam-filter
                      label
                        for:sephia-settings-holloywood-spam-filter
                        innerValue:Enable Hollywood spam filter
                        title:All emails coming from people that you have not first sent an email to, will be treated as spam
                      input:sephia-settings-signature-spam-filter
                        type:checkbox
                        .data-field:signature-spam-filter
                      label
                        for:sephia-settings-signature-spam-filter
                        innerValue:Enable signature spam filter
                        title:All emails that are not cryptographically signed will be treated as spam
                      input:sephia-settings-cryptography-spam-filter
                        type:checkbox
                        .data-field:cryptography-spam-filter
                      label
                        for:sephia-settings-cryptography-spam-filter
                        innerValue:Enable cryptography spam filter
                        title:All emails that are not encrypted will be treated as spam


        /*
         * Save button, beneath our tab widget.
         */
        div
          class:right air-top
          widgets
            div
              class:strip
              style:"display:inline-block;"
              widgets

                /*
                 * Save button at the bottom of form, beneath the tab widget.
                 */
                button:sephia-settings-save
                  innerValue:Save
                  title:Saves your settings and closes this form
                  onclick

                    /*
                     * Needed further below.
                     */
                    whoami

                    /*
                     * Serializing all setting values, and storing in user settings.
                     */
                    p5.web.widgets.get-parent:sephia-settings-tab
                    micro.form.serialize:x:/-/*/*?value

                    /*
                     * Making sure we set PGP fingerprint value to "null" unless it actually has a value.
                     */
                    if:x:/@micro.form.serialize/*/pgp-key?value
                      =:
                      set:x:/@micro.form.serialize/*/pgp-key?value

                    /*
                     * Adding the serialized settings from form to user's settings.
                     */
                    add:x:/../*/p5.auth.my-settings.set/*
                      src:x:/@micro.form.serialize/*

                    /*
                     * Checking if we have a [fetch-emails] configuration object, and
                     * if so, we add it to user's settings.
                     */
                    load-file:@SEPHIA/configuration/default-user-settings.hl
                    if:x:/-/*/*/fetch-emails?count
                      >:int:0

                      /*
                       * Sephia is configured to only allow its users to fetch emails at specific
                       * times of day. Making sure we store these times into user's settings.
                       *
                       * However, this can be configured on a per role basis, making sure we check for
                       * roles matching the current user's role in the configuration file first.
                       */
                      if:x:/../*/load-file/*/*/fetch-emails/={0}/[0,1]
                        :x:/@whoami/*/role?value

                        /*
                         * There is an explicit configuration for the current user's role, making
                         * sure we use this configuration setting.
                         *
                         * Making sure this configuration is not empty first though, which would imply that users
                         * in this role are allowed to check their emails anytime they wish, at which point
                         * we do not need to add up any [fetch-emails] configuration for the user.
                         */
                        if:x:/../*/load-file/*/*/fetch-emails/={0}/[0,1]/*
                          :x:/@whoami/*/role?value

                          /*
                           * There exists an explicitly mentioned configuration for user's role,
                           * and it is not empty.
                           *
                           * In case configuration file has "logical errors" though, and mentions the same role
                           * twice or more, we make sure we only use the first declaration from the file.
                           */
                          add:x:/../*/p5.auth.my-settings.set/*/sephia
                            src:x:/../*/load-file/*/*/fetch-emails/={0}/[0,1]
                              :x:/@whoami/*/role?value

                      else-if:x:/../*/load-file/*/*/fetch-emails/=~/[0,1]/*

                        /*
                         * There was no explicit configuration for user's role, checking if there
                         * is a generic one, which is the default configuration for all roles
                         * not explicitly mentioned.
                         *
                         * Notice, the generic configuration might also allow users by default to check
                         * their emails at any time of the day, hence our [else-if] expression above checks
                         * if the generic handler actually has any values, before it evaluates this else-if lambda.
                         */
                        add:x:/../*/p5.auth.my-settings.set/*/sephia
                          src:x:/../*/load-file/*/*/fetch-emails/=~/[0,1]

                    /*
                     * Making sure we preserve any non-Sephia settings for user.
                     *
                     * Notice, the same installation might be used for multiple apps.
                     * Without this simple addition to our code, all "non-Sephia" settings would
                     * disappear after evaluating this lambda.
                     */
                    p5.auth.my-settings.get
                    add:x:/../*/p5.auth.my-settings.set
                      src:x:/@p5.auth.my-settings.get/*(!/sephia)

                    /*
                     * Storing user's settings.
                     */
                    p5.auth.my-settings.set
                      sephia

                    /*
                     * Notice, before we can re-relaunch inbox, we must signal any fetcher threads that 
                     * they should restart, to update settings.
                     *
                     * Making sure we synchronise access to thread signal object.
                     */
                    write-lock:sephia.core.thread-signal-{0}
                      :x:/@whoami/*/username?value

                      /*
                       * Deleting old thread signal object.
                       *
                       * Notice, we make sure we do not delete any [last-fetch] thread signals,
                       * since this would allow the user to check his emails, simply by changing
                       * his settings, and saving them again. Which of course would become a "hack"
                       * for users to be able to check their emails out of the normally allowed times
                       * of the day they're allowed to check for emails.
                       */
                      delete-data:x:/*/*/sephia.core.thread-signal-{0}(!/*/last-fetch/.)
                        :x:/@whoami/*/username?value

                      /*
                       * Checking if there exists a thread signal object, which might be the case, if
                       * it was of type [last-fetch], and only if no signal object exists, we insert a new
                       * signal object, forcing Sephia to restart its POP3 worker thread.
                       */
                      select-data:x:/*/*/sephia.core.thread-signal-{0}
                        :x:/@whoami/*/username?value
                      if:x:/-/*
                        not

                        /*
                         * Creating a new thread signal object, that informs thread to restart.
                         */
                        set:x:/+/*?name
                          src:sephia.core.thread-signal-{0}
                            :x:/@whoami/*/username?value
                        insert-data
                          thread
                            restart:bool:true

                    /*
                     * Updating contacts table with email matching current user, making sure its name becomes correct.
                     *
                     * Making sure we only set "isverified" to 1 if user has a PGP key.
                     */
                    _is-verified:int:0
                    if:x:/@micro.form.serialize/*/pgp-key?value

                      /*
                       * User has a PGP fingerprint.
                       */
                      set:x:/@_is-verified?value
                        src:int:1

                    /*
                     * Doing our actual update of "self".
                     */
                    p5.mysql.connect:[sephia]
                      p5.mysql.update:@"update contacts set name = @name, email = @email, fingerprint = @fingerprint, isverified = @isverified where type = 'self' and username = @username"
                        @name:x:/@micro.form.serialize/*/name?value
                        @fingerprint:x:/@micro.form.serialize/*/pgp-key?value
                        @isverified:x:/@_is-verified?value
                        @email:x:/@micro.form.serialize/*/email?value
                        @username:x:/@whoami/*/username?value

                      /*
                       * Verifying something was indeed updated, and if not, making sure we insert a new record.
                       */
                      if:x:/@p5.mysql.update?value.int
                        =:int:0

                        /*
                         * Nothing was updated, hence we'll need to insert a new record.
                         */
                        p5.mysql.insert:@"insert into contacts (name, email, username, fingerprint, isverified, type) values (@name, @email, @username, @fingerprint, @isverified, 'self')"
                          @name:x:/@micro.form.serialize/*/name?value
                          @email:x:/@micro.form.serialize/*/email?value
                          @username:x:/@whoami/*/username?value
                          @fingerprint:x:/@micro.form.serialize/*/pgp-key?value
                          @isverified:x:/@_is-verified?value

                    /*
                     * Making sure we remove cache of all "babelizing subjects", to force Sephia to
                     * fetch them again, since they might have changed.
                     */
                    p5.web.session.set:sephia.core.random-subjects

                    /*
                     * Re-launches inbox by reloading location for simplicity.
                     *
                     * If skins were changed, we'll need to entirely reload the inbox anyways.
                     */
                    p5.web.reload-location

                /*
                 * Close button that will close settings without updating them.
                 */
                button:sephia-settings-close
                  innerValue:Close
                  title:Close settings without saving your changes
                  onclick

                    /*
                     * Re-launches Sephia for simplicity, no need to reload location.
                     */
                    micro.evaluate.file:@SEPHIA/launch.hl

                /*
                 * "Next" button that will display the "next" tabview.
                 */
                button:sephia-settings-next
                  innerValue:Next
                  style:"border-left-style:solid;border-radius:var(--border-radius);"
                  onclick

                    /*
                     * Figuring out the currently visible tab view.
                     */
                    p5.web.widgets.find-first-like:sephia-settings-tab
                      class:micro-tab-buttons
                    p5.web.widgets.find-first-like:x:/-/*/*?value
                      class:micro-tab-active

                    /*
                     * Finding the next tab view button, if any.
                     */
                    p5.web.widgets.find-first:sephia-settings-tab
                      after:x:/@p5.web.widgets.find-first-like/*/*?value

                    /*
                     * Checking if there are any next tab view buttons.
                     */
                    if:x:/@p5.web.widgets.find-first/*/*?value

                      /*
                       * There are at least one more button in our tabview.
                       *
                       * For simplicity, we simply trigger [onclick] for it.
                       */
                      p5.web.widgets.ajax-events.raise:x:/@p5.web.widgets.find-first/*/*?value
                        onclick

                      /*
                       * Checking if this was our last button, and if so, showing
                       * our "Save" button, and hiding our "Next" button.
                       */
                      p5.web.widgets.find-first:sephia-settings-tab
                        after:x:/./@p5.web.widgets.find-first/*/*?value
                      if:x:/-/*/*?value
                        not

                        /*
                         * This was our last tab view button.
                         */
                        set-widget-property:sephia-settings-save
                          visible:true
                        set-widget-property:x:/../*/_event?value
                          visible:false
