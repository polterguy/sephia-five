
/*
 * Creates our "recipient" widget.
 *
 * Will allow the user to search through his contacts, and add new recipients to his email.
 *
 * Optionally pass in [to], [cc] and [bcc] as initial recipients of email.
 * These are collections of email addresses, where the email address is stored as the name of the node.
 */
create-event:sephia._internals.widgets.recipients

  /*
   * Adding specified recipients, first [to].
   */
  join:x:/../*/to/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=to/.
    src
      value:x:/@join?value

  /*
   * Then [cc].
   */
  join:x:/../*/cc/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=cc/.
    src
      value:x:/@join?value

  /*
   * Then [bcc].
   */
  join:x:/../*/bcc/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=bcc/.
    src
      value:x:/@join?value

  /*
   * Returning actual recipient widget to caller.
   */
  return
    container
      class:sephia-compose-recipients
      .ondrop-auto

        /*
         * Invoked by client when autocompleter should be destroyed.
         */
        p5.web.post.get:sephia-five-search
        p5.web.widgets.get-parent:x:/-/*?value
        p5.web.widgets.find-first:x:/-/*/*?value
          .auto
        delete-widget:x:/-/*/*?value

      .onclick-first

        /*
         * Invoked by client when user press carriage return from textbox.
         *
         * We simply select the first item from autocompleter.
         */
        p5.web.post.get:sephia-five-search
        p5.web.widgets.get-parent:x:/-/*?value
        p5.web.widgets.find-first:x:/-/*/*?value
          .auto
        if:x:/@p5.web.widgets.find-first/*/*?value

          /*
           * Autocompleter is visible, finding first item, and clicking it,
           * before we destroy autocompleter itself.
           */
          p5.web.widgets.find-first-like:x:/@p5.web.widgets.find-first/*/*?value
            class:sephia-contacts-autocompleter-item
          p5.web.widgets.ajax-events.raise:x:/-/*/*?value
            onclick

      .onsearch-contacts

        /*
         * Retrieving the text widget that triggered the search, and the value
         * of the search.
         */
        p5.web.post.get:sephia-five-search
        get-widget-property:x:/-/*?value
          value

        /*
         * Splitting up value of widget on ",", in case it has multiple emails
         * from before.
         */
        split:x:/@get-widget-property/*/*?value
          trim:true
          =:,

        /*
         * Used to store what the user is actually searching for.
         */
        eval-x:x:/+
        _search:x:/@split/0/-?name

        /*
         * Checking if user has an empty search, which is true if textbox value
         * ends with a ",", after being trimmed.
         */
        set:x:/@get-widget-property/*/*?value
          trim-right:x:/@get-widget-property/*/*?value
        if
          ends-with:x:/@get-widget-property/*/*?value
            src:","

          /*
           * User has not yet typed any query at all, defaulting to "empty search",
           * to show the last 5 contacts.
           */
          set:x:/@_search?value

        /*
         * Checking if user already has existing emails added, atwhich point we
         * remove them out of the search query results.
         */
        _extra
        if:x:/@split/*
          set:x:/@_extra?value
            src:"and c.email not in (@emails)"
          add:x:/+/*/*
            src:x:/@split/*?name
          add:x:/../*/p5.mysql.connect/*/p5.mysql.select
            src
              @emails

        /*
         * Opening connection, and performing the search.
         *
         * Notice, this query will select the 5 top contacts whom you have 
         * previously received emails from, starting out with the given query, 
         * in the name or email, in addition to that it will sort according to 
         * whom you last received an email from, and exclude contacts that have
         * been explicitly marked as spam senders.
         *
         * Which further will reduce the risk of sending an email to the wrong 
         * contact, since it is more likely that you would want to send an email 
         * to a person whom you have recently received an email from.
         *
         * Credits goes to my lawyer, and Jeffrey Steadfast, who proposed this 
         * little trick.
         */
        whoami
        p5.mysql.connect:[sephia]
          p5.mysql.select:@"select c.name, c.email, c.id from contacts c
inner join emails e on e.sender = c.id
inner join (select sender, MAX(date) maxDate from emails group by sender) e2 on e.sender = e2.sender and e.date = e2.maxDate
where (c.name like @query or c.email like @query) and (c.spam is null or c.spam = 0) 
and c.email not like '%noreply%' and c.email not like '%no-reply%' and c.email not like '%+%' and c.email not like 'mailer-daemon%'
and (c.type is null or c.type != 'self') 
and c.username = @username
{0}
order by e.date desc
limit 5"
            :x:/@_extra?value
            @query:"{0}%"
              :x:/@_search?value
            @username:x:/@whoami/*/username?value

          /*
           * Checking if above SQL yielded less than 5 items, and if so, 
           * appending a handful of more items, that are less "restrictive", to
           * make sure we can actually search all contacts, if necessary.
           *
           * These contacts however, will end up always at the bottom of the 
           * autocompleter.
           */
          if:x:/@p5.mysql.select/*?count
            <:int:5

            /*
             * Above SQL didn't return 5 results, therefor we select a couple 
             * of additional results to make sure we are able to search all contacts.
             */
            add:x:/+2/*/*/\@ids
              src:x:/@p5.mysql.select/*/*/id?value
            if:x:/@p5.mysql.select/*/*
              not
              p5.mysql.select:@"select c.name, c.email from contacts c 
where username = @username and (c.email like @query or c.name like @query)
order by c.name
limit 5"
                @query:"{0}%"
                  :x:/@_search?value
                @username:x:/@whoami/*/username?value
            else
              p5.mysql.select:@"select c.name, c.email from contacts c 
where username = @username and (c.email like @query or c.name like @query) {0}
order by c.name
limit 5"
                :"and c.id not in (@ids)"
                @query:"{0}%"
                  :x:/@_search?value
                @username:x:/@whoami/*/username?value
                @ids

        /*
         * Retrieving parent container widget which we will be creating our
         * autocompleter, and stuff into.
         */
        p5.web.widgets.get-parent:x:/@p5.web.post.get/*?value

        /*
         * Checking if a previous autocompleter exists, and if so,
         * making sure we delete it.
         */
        p5.web.widgets.find:x:/@p5.web.widgets.get-parent/*/*?value
          .auto
        if:x:/@p5.web.widgets.find/*/*?value

          /*
           * Previous autocompleter exists, deleting it.
           */
          delete-widget:x:/@p5.web.widgets.find/*/*?value

        /*
         * Checking if we have any matches at all, and if not, returning early.
         */
        if:x:/@p5.mysql.connect/**/p5.mysql.select/*/row
          not
          return

        /*
         * Adding a widget for each SQL result from above query.
         */
        for-each:x:/@p5.mysql.connect/**/p5.mysql.select/*/row/[0,5]
          eval-x:x:/+/*/*/*|/+/*/*/*/onclick/*/_widget
          add:x:/../*/create-widget/*/widgets
            src
              a
                href:#
                class:sephia-contacts-autocompleter-item
                role:button
                .value:x:/@_dp/#/*/email?value
                tabindex:-1
                innerValue:{0} &lt;{1}&gt;
                  :x:/@_dp/#/*/name?value
                  :x:/@_dp/#/*/email?value
                onclick

                  /*
                   * Forward evaluated above, and is a reference to the text 
                   * input widget this autocompleter is associated with.
                   */
                  _widget:x:/@p5.web.post.get/*?value

                  /*
                   * Retrieving the email address user selected.
                   */
                  get-widget-property:x:/../*/_event?value
                    .value

                  /*
                   * Adding the email address to the widget's value.
                   */
                  get-widget-property:x:/@_widget?value
                    value
                  split:x:/-/*/*?value
                    =:,
                  set:x:/-/0/-
                  join:x:/@split/*?name
                    sep:,
                  if:x:/@join?value
                    and:x:/@join?value
                      !=:
                    set:x:/@join?value
                      src:"{0}, "
                        :x:/@join?value
                  set-widget-property:x:/@_widget?value
                    value:"{0}{1}, "
                      :x:/@join?value
                      :x:/../*/get-widget-property/[0,1]/*/*?value

                  /*
                   * Deleting autocomplete widget.
                   */
                  p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                    .auto
                  delete-widget:x:/-/*/*?value


                  /*
                   * Settings focus to recipient text field.
                   */
                  micro.page.set-focus:x:/@_widget?value
                    no-select:bool:true

                  /*
                   * Making sure we update status of email, since we've got
                   * another recipe now.
                   */
                  sephia.contacts._changed:x:/@_widget?value
        /*
         * Creating autocompletion widget.
         */
        create-widget
          parent:x:/@p5.web.widgets.get-parent/*/*?value
          .auto
          class:sephia-contacts-autocompleter shaded rounded
          widgets

      oninit

        /*
         * Invoking this guy initially to set the CSS classes correct for the
         * parent widget according to whether or not email can be sent encrypted or not.
         */
        sephia.contacts._changed:x:/../*/_event?value

        /*
         * Making sure we include JavaScript that creates our "autocompleter" for
         * searching for contacts as the user types in characters.
         */
        p5.web.include-javascript:@"
p5.sephia_search_contacts = function(e) {{
  setTimeout (function () {{
    p5.$('{0}').raise('.onsearch-contacts', {{
      onbefore:function (pars, evt) {{
        pars.push(['sephia-five-search', e.target.id]);
      }}
    }});
  }}, 1);
}}
p5.sephia_search_keydown = function (e) {{
  if (e.keyCode == 8 || e.keyCode == 46) {{
    p5.sephia_search_contacts (e);
  }} else if (e.keyCode == 13) {{
    p5.$('{0}').raise('.onclick-first', {{
      onbefore:function (pars, evt) {{
        pars.push(['sephia-five-search', e.target.id]);
      }}
    }});
    return false;
  }}
}}
p5.sephia_search_focus = function (e) {{
  if(e.target.value == '') {{
    p5.sephia_search_contacts (e);
  }}
}}
p5.sephia_search_blur = function (e) {{
  setTimeout (function() {{
  p5.$('{0}').raise('.ondrop-auto', {{
    onbefore:function (pars, evt) {{
      pars.push(['sephia-five-search', e.target.id]);
    }}
  }});
}}, 500);}}"
          :x:/../*/_event?value

      class:row
      widgets
        div
          class:col-50 strip fill sephia-compose-to-wrapper
          style:"padding:0;"
          widgets
            label
              innerValue:To
              oninit

                /*
                 * Making sure label is associated with text input field.
                 */
                p5.web.widgets.get-parent:x:/../*/_event?value
                p5.web.widgets.find-first:x:/-/*/*?value
                  element:input
                set-widget-property:x:/../*/_event?value
                  for:x:/@p5.web.widgets.find-first/*/*?value

            input
              type:text
              class:sephia-compose-recipients-to
              .data-field:to
              .recipient
              onkeypress:@"p5.sephia_search_contacts(event);"
              onkeydown:@"return p5.sephia_search_keydown(event);"
              onfocus:@"p5.sephia_search_focus(event);"
              onblur:@"p5.sephia_search_blur(event);"

        div
          class:col-25 strip fill sephia-compose-cc-wrapper
          widgets
            label
              innerValue:Cc
              oninit

                /*
                 * Making sure label is associated with text input field.
                 */
                p5.web.widgets.get-parent:x:/../*/_event?value
                p5.web.widgets.find-first:x:/-/*/*?value
                  element:input
                set-widget-property:x:/../*/_event?value
                  for:x:/@p5.web.widgets.find-first/*/*?value

            input
              type:text
              class:sephia-compose-recipients-cc
              .data-field:cc
              .recipient
              onkeypress:@"p5.sephia_search_contacts(event);"
              onkeydown:@"return p5.sephia_search_keydown(event);"
              onfocus:@"p5.sephia_search_focus(event);"
              onblur:@"p5.sephia_search_blur(event);"

        div
          class:col-25 strip fill sephia-compose-bcc-wrapper
          widgets
            label
              innerValue:Bcc
              oninit

                /*
                 * Making sure label is associated with text input field.
                 */
                p5.web.widgets.get-parent:x:/../*/_event?value
                p5.web.widgets.find-first:x:/-/*/*?value
                  element:input
                set-widget-property:x:/../*/_event?value
                  for:x:/@p5.web.widgets.find-first/*/*?value

            input
              type:text
              class:sephia-compose-recipients-bcc
              .data-field:bcc
              .recipient
              onkeypress:@"p5.sephia_search_contacts(event);"
              onkeydown:@"return p5.sephia_search_keydown(event);"
              onfocus:@"p5.sephia_search_focus(event);"
              onblur:@"p5.sephia_search_blur(event);"





/*
 * Active Event that shows contacts, and allows user to select
 * email from list of contacts, and add to given [_arg] input widget.
 */
create-event:sephia.contacts._find

  /*
   * Displaying contacts in a modal widget.
   */
  eval-x:x:/+/**/_widget
  create-widgets
    micro.widgets.modal:sephia-select-contact-modal
      class:micro-modal micro-modal-smaller sephia-compose-search-contacts
      events

        /*
         * Active Event that displays a modal widget with all given fingerprints, allowing user to import
         * public keys from key server, with given fingerprints.
         *
         * Expects [contact-id] in addition to a bunch of fingerprints, in addition to optionally [.done] lambda,
         * which will be invoked when import operation is finished.
         */
        sephia.core._recipients._import-keys

          /*
           * Used to separate arguments between the rest of the lambda object.
           */
          .signal

          /*
           * Creating (another) modal widget that displays the search results, and allows user
           * to import a key from key server.
           */
          add:x:/../*/.apply/**/.done
            src:x:/../*/.done/*
          eval-x:x:/+/**/_contact-id
          .apply
            eval-x:x:/+/*/*
            return
              item
                .row
                  onclick

                    /*
                     * Importing PGP key, and associating it with contact.
                     */
                    _contact-id:x:/../*/contact-id?value
                    p5.web.widgets.get-children:x:/../*/_event?value
                    get-widget-property:x:/-/*/1?value
                      innerValue
                    sephia._internals.pgp.download-key-from-key-id:x:/@get-widget-property/*/*?value
                    p5.crypto.import-public-pgp-key:x:/@sephia._internals.pgp.download-key-from-key-id?value
                    if:x:/@p5.crypto.import-public-pgp-key/*

                      /*
                       * Success!
                       */
                      delete-widget:sephia-import-pgp-key-from-server
                      p5.web.widgets.find-first-like:sephia-select-contact-modal
                        class:micro-modal-content
                      eval-x:x:/+/*
                      micro.windows.info:Key was successfully imported from key server
                        parent:x:/@p5.web.widgets.find-first-like/*/*?value
                        class:micro-windows-info success

                      /*
                       * Updating database.
                       */
                      p5.mysql.connect:[sephia]
                        p5.mysql.update:@"update contacts set fingerprint = @fingerprint where id = @id"
                          @fingerprint:x:/@p5.crypto.import-public-pgp-key/*?name
                          @id:x:/../*/_contact-id?value
                      .done
                      eval:x:/-

                Fingerprint:x:/@_dn/#?name
                ID:x:/@_dn/#?value
                Created:x:/@_dn/#/*/Created?value

          apply:x:/../*/create-widgets/**/micro.widgets.grid/*/rows
            src:x:/@.signal/--/<-(!/_event!/contact-id!/.done)
            template
              {@eval}:x:/@.apply
          create-widgets
            micro.widgets.modal:sephia-import-pgp-key-from-server
              class:micro-modal micro-modal-smaller
              widgets
                h3
                  innerValue:We found the following key(s)
                micro.widgets.grid
                  class:hover
                  columns
                    Fingerprint
                    ID
                    Created
                  rows
                div
                  class:right air-top
                  widgets
                    button
                      innerValue:Close
                      title:Close without importing any keys
                      oninit
                        micro.page.set-focus:x:/../*/_event?value
                      onclick

                        /*
                         * Deleting modal widget.
                         */
                        delete-widget:sephia-import-pgp-key-from-server

      widgets

        /*
         * Search textbox wrapper.
         */
        div:sephia-contacts-search-wrapper
          class:right sephia-compose-search-contacts-search-wrapper
          .offset:0
          widgets
            div
              class:strip sephia-compose-search-contacts-inner-search-wrapper
              style:"display:inline-block;"
              widgets
                input:sephia-select-contact-filter
                  type:text
                  class:sephia-compose-search-contacts-textbox
                  placeholder:Search ...
                  onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-search-contacts-button').raise('onclick');return false;} else if (event.keyCode == 27) {p5.$('sephia-search-contacts-close-btn').raise('onclick');return false;}"
                  oninit

                    /*
                     * Setting initial focus to search textbox.
                     */
                    micro.page.set-focus:x:/../*/_event?value

                button:sephia-search-contacts-button
                  innerValue:@"<span class=""icon-search""></span>"
                  class:sephia-compose-search-contacts-search-btn
                  title:Search for contact
                  onclick

                    /*
                     * Retrieving search filter condition, and re-databinding grid.
                     */
                    get-widget-property:sephia-select-contact-filter
                      value
                    eval-x:x:/+/*
                    sephia.contacts.find._databind
                      filter:x:/@get-widget-property/*/*?value
                    micro.page.set-focus:sephia-select-contact-filter

                    /*
                     * Making sure we reset "offset".
                     */
                    set-widget-property:sephia-contacts-search-wrapper
                      .offset:0

                button
                  innerValue:@"<span class=""icon-chevron-left""></span>"
                  class:sephia-compose-search-contacts-go-previous-btn
                  title:Go to previous page
                  onclick

                    /*
                     * Retrieving filter condition and re-databinding contacts, 
                     * subtracting 10 from "offset".
                     */
                    get-widget-property:sephia-contacts-search-wrapper
                      .offset
                    if:x:/-/*/*?value.int
                      =:int:0

                      /*
                       * Already at the beginning of dataset.
                       */
                      return

                    -:x:/@get-widget-property/*/*?value.int
                      _:10
                    set-widget-property:sephia-contacts-search-wrapper
                      .offset:x:/@-?value

                    get-widget-property:sephia-select-contact-filter
                      value
                    eval-x:x:/+/*
                    sephia.contacts.find._databind
                      filter:x:/@get-widget-property/*/*?value
                      offset:x:/@-?value

                button
                  innerValue:@"<span class=""icon-chevron-right""></span>"
                  class:sephia-compose-search-contacts-go-next-btn
                  title:Go to next page
                  onclick

                    /*
                     * Retrieving filter condition and re-databinding contacts, 
                     * adding 10 from "offset".
                     */
                    get-widget-property:sephia-contacts-search-wrapper
                      .offset
                    +:x:/@get-widget-property/*/*?value.int
                      _:10
                    get-widget-property:sephia-select-contact-filter
                      value
                    eval-x:x:/+/*
                    sephia.contacts.find._databind
                      filter:x:/@get-widget-property/*/*?value
                      offset:x:/@+?value
                    if:x:/-?value
                      set-widget-property:sephia-contacts-search-wrapper
                        .offset:x:/@+?value

                button:sephia-search-contacts-close-btn
                  innerValue:@"<span class=""icon-close""></span>"
                  class:sephia-compose-search-contacts-close-btn
                  title:Close window
                  onclick

                    /*
                     * Closing modal "searchj for contact" window.
                     */
                    delete-widget:sephia-select-contact-modal

        /*
         * Actual datagrid.
         */
        micro.widgets.grid:sephia-select-contact-grid
          class:hover air-bottom sephia-compose-search-contacts-grid
          oninit

            /*
             * Initially databding grid without any filter.
             */
            sephia.contacts.find._databind

          events

            /*
             * Databinds contacts grid.
             * Optionally pass in [filter] and [offset].
             *
             * Notice, since this is a modal window, and there can only be one at the time,
             * we don't need to verify the invocation is to the current widget, since there
             * can only be one at the time.
             */
            sephia.contacts.find._databind
              .defaults
                offset:0
              whoami
              p5.mysql.connect:[sephia]
                p5.mysql.select:@"select id, name, email, fingerprint, isverified from contacts where username = @username and 
(name like @filter or email like @filter) limit 10 offset @offset"
                  @username:x:/@whoami/*/username?value
                  @filter:"%{0}%"
                    :x:/../*/filter?value
                  @offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value.int

              /*
               * Verifying we actually had a result.
               */
              if:x:/@p5.mysql.connect/*/p5.mysql.select/*?count
                =:int:0

                /*
                 * No result, returning early since grid was never in fact databound.
                 * Signaling the fact that grid was never databound to caller.
                 */
                return:bool:false

              /*
               * Adding smiley in above SQL results according to whether or not we have 
               * a fingerprint and key is verified or not.
               */
              for-each:x:/@p5.mysql.connect/*/p5.mysql.select/*
                if:x:/@_dp/#/*/fingerprint?value
                  if:x:/@_dp/#/*/isverified?value.int
                    !=:int:0

                    /*
                     * We have a fingerprint, and the key has been verified.
                     */
                    add:x:/@_dp/#
                      src
                        status:@"<span class=""icon-smile-o""></span>"
                          style:"font-size:1.3rem;"
                          title:You have a verified PGP key for this person

                  else

                    /*
                     * We have a fingerprint, but the key has not been verified.
                     */
                    eval-x:x:/+/**/title|/+/**/onclick/**(/_id|/_fingerprint|/sephia.contacts.find._databind/*)
                    add:x:/@_dp/#
                      src
                        status
                          widgets
                            a
                              href:#
                              style:"font-size:1.3rem;"
                              role:button
                              title:Verify that the key '{0}' actually belongs to {1} &lt;{2}&gt;
                                :x:/@_dp/#/*/fingerprint?value
                                :x:/@_dp/#/*/name?value
                                :x:/@_dp/#/*/email?value
                              innerValue:@"<span class=""icon-meh-o""></span>"
                              onclick

                                /*
                                 * Forward evaluated above.
                                 */
                                _id:x:/@_dp/#/*/id?value
                                _fingerprint:x:/@_dp/#/*/fingerprint?value

                                /*
                                 * Selecting contact name/email from database.
                                 */
                                p5.mysql.connect:[sephia]
                                  p5.mysql.select:@"select name, email from contacts where id = @id"
                                    @id:x:/@_id?value

                                /*
                                 * Notice, we ask the user to confirm that he is certain about that they key with
                                 * the specified fingerprint actually belongs to the person with the email address,
                                 * before we allow him to sign the key, and upload the signed key to any key servers.
                                 */
                                p5.web.widgets.find-first-ancestor-like:x:/../*/_event?value
                                  class:micro-modal-content
                                eval-x:x:/+/*
                                micro.windows.info:Confirm that '{0}' belongs to '{1} &lt;{2}&gt;'?
                                  :x:/@_fingerprint?value
                                  :x:/@p5.mysql.connect/*/*/*/name?value
                                  :x:/@p5.mysql.connect/*/*/*/email?value
                                  class:micro-windows-info-sticky warning
                                  parent:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
                                  widgets

                                    button
                                      innerValue:No
                                      onclick
                                        delete-widget:micro-windows-info

                                    button
                                      innerValue:Yes!
                                      onclick

                                        /*
                                         * Forward evaluated above.
                                         */
                                        _id:x:/@_dp/#/*/id?value
                                        _fingerprint:x:/@_dp/#/*/fingerprint?value

                                        /*
                                         * Will cryptographically sign the public key with the user's private key,
                                         * to verify that it belongs to the specified contact, and upload the verification to 
                                         * the default PGP key server.
                                         *
                                         * In addition, it will mark the fingerprint for contact in "contacts" database as "isverified".
                                         */
                                        eval-x:x:/+/*
                                        sephia._internals.pgp.sign-public-key
                                          contact:x:/@_id?value
                                          fingerprint:x:/@_fingerprint?value

                                        /*
                                         * Verifying submitting signed public key to key server was a success.
                                         */
                                        if:x:/@sephia._internals.pgp.sign-public-key?value
                                          not

                                          /*
                                           * Submitting signed key to key server was not a success.
                                           */
                                          micro.windows.info:Signed key could not be submitted to key server.
                                          return

                                        /*
                                         * Needed further down as parent to "bubble info window".
                                         */
                                        p5.web.widgets.find-first-ancestor-like:x:/../*/_event?value
                                          class:micro-modal-content

                                        /*
                                         * The arguments are forward evaluated above to the same values they were when the grid
                                         * was originally databound.
                                         */
                                        sephia.contacts.find._databind
                                          filter:x:/../*/filter?value
                                          offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value

                                        /*
                                         * Supplying feedback to user.
                                         */
                                        eval-x:x:/+/*
                                        micro.windows.info:The key was successfully verified
                                          class:micro-windows-info success
                                          parent:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value

                else

                  /*
                   * We do not have a key for user.
                   */
                  eval-x:x:/+/**/title|/+/**/onclick/**(/_id|/_fingerprint|/sephia.contacts.find._databind/*)
                  add:x:/@_dp/#
                    src
                      status
                        widgets
                          a
                            href:#
                            role:button
                            style:"font-size:1.3rem;"
                            title:Search for key on key server using email '{0}' as query
                              :x:/@_dp/#/*/email?value
                            innerValue:@"<span class=""icon-frown-o""></span>"
                            onclick

                              /*
                               * Forward evaluated above.
                               */
                              _id:x:/@_dp/#/*/id?value

                              /*
                               * Needed further down as parent to "bubble info window".
                               */
                              p5.web.widgets.find-first-ancestor-like:x:/../*/_event?value
                                class:micro-modal-content

                              /*
                               * Searching for a PGP key on the key server matching the email address of the contact.
                               * First finding contact's email address.
                               */
                              p5.mysql.connect:[sephia]
                                p5.mysql.select:@"select email from contacts where id = @id"
                                  @id:x:/@_id?value
                              sephia.pgp.key-server.search:x:/@p5.mysql.connect/*/p5.mysql.select/*/*/email?value

                              /*
                               * Checking if key server returned anything.
                               */
                              if:x:/@sephia.pgp.key-server.search/*

                                /*
                                 * We have results, displaying the results to user and allowing him to choose a key.
                                 */
                                add:x:/+2
                                  src:x:/@sephia.pgp.key-server.search/*
                                eval-x:x:/+/*
                                sephia.core._recipients._import-keys
                                  contact-id:x:/../*/_id?value
                                  .done
                                    sephia.contacts.find._databind
                                      filter:x:/../*/filter?value
                                      offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value

                              else

                                /*
                                 * No results.
                                 */
                                eval-x:x:/+/*
                                micro.windows.info:No keys found on key server
                                  class:micro-windows-info warning
                                  parent:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value

                              /*
                               * The arguments are forward evaluated above to the same values they were when the grid
                               * was originally databound.
                               */
                              sephia.contacts.find._databind
                                filter:x:/../*/filter?value
                                offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value

              /*
               * Adding row to grid databind invocation.
               */
              add:x:/../*/micro.widgets.grid.databind
                src:x:/@p5.mysql.connect/*/p5.mysql.select/*
              add:x:/../*/micro.widgets.grid.databind/*
                src
                  .row

                    /*
                     * Making sure row becomes clickable, to allow user to select a contact
                     * by clicking the row.
                     */
                    onclick

                      /*
                       * Fetching email from innerValue on "td" element, and adding it to specified widget [_arg]
                       * during creation of grid.
                       * [_widget] was forward evaluated above.
                       */
                      _widget:x:/../*/_arg?value

                      /*
                       * Finding email from second td cell's innerValue.
                       */
                      p5.web.widgets.get-children:x:/../*/_event?value
                      get-widget-property:x:/-/0/1?value
                        innerValue

                      /*
                       * Appending email to text input widget's value, making sure we separate all emails with ",".
                       */
                      get-widget-property:x:/@_widget?value
                        value
                      _content
                      set:x:/@_content?value
                        src:"{0}, {1}"
                          :x:/../*/get-widget-property/[1,2]/*/*?value
                          :x:/../*/get-widget-property/[0,1]/*/*?value

                      /*
                       * Trimming away excessive ",", before we set widget's value to include also
                       * the newly added email address.
                       */
                      trim:x:/@_content?value
                        chars:", "
                      set-widget-property:x:/@_widget?value
                        value:x:/@trim?value

                      /*
                       * Deleting entire modal widget wrapping "search for contact", and
                       * setting focus to widget which now should contact the newly added email address.
                       */
                      delete-widget:sephia-select-contact-modal
                      micro.page.set-focus:x:/@_widget?value

                      /*
                       * Manually triggering [onchange] for widget, which will update main
                       * composer widget's CSS classes according to whether or not email can be encrypted
                       * or not.
                       */
                      p5.web.widgets.ajax-events.raise:x:/@_widget?value
                        onchange

              /*
               * Removing all fingerprint and isverified cells, since they were only temporarily used.
               */
              set:x:/../*/micro.widgets.grid.databind/*/*(/fingerprint|/isverified|/id)

              /*
               * Databinding contacts grid, which now should be populated according to above logic.
               */
              micro.widgets.grid.databind:sephia-select-contact-grid

              /*
               * Returning true to caller to signal that we were able to databind grid.
               */
              return:bool:true





/*
 * Given a widget as [_arg], will find all recipients of email, 
 * and verify that email can be sent encrypted or not, and modify background
 * of email composer accordingly.
 */
create-event:sephia.contacts._changed

  /*
   * Finding root ancestor, and all recipient input elements beneath, and figuring out all
   * emails we've currently got in our list of recipients (all field, To, Cc and Bcc).
   */
  p5.web.widgets.find-first-ancestor-like:x:/../*/_arg?value
    .email-composer
  p5.web.widgets.find:x:/-/*/*?value
    .recipient
  get-widget-property:x:/-/*/*?value
    value
  join:x:/-/*/*?value
    sep:,
  trim:x:/-?value
    chars:,
  if:x:/-?value
    =:

    /*
     * There is no text in any of the recipients textbox input fields.
     * Defaulting to "sephia-unknown".
     */
    micro.css.delete:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
      class:sephia-unsafe sephia-safe
    micro.css.add:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
      class:sephia-unknown
    return

  split:x:/@trim?value
    =:,
    =:" "

  /*
   * Used to temporary hold status of email.
   */
  _status:sephia-unsafe

  /*
   * Checking if all recipients have a public PGP key.
   */
  whoami
  p5.mysql.connect:[sephia]
    add:x:/+/*/\@email
      src:x:/@split/*?name
    p5.mysql.select:@"select fingerprint from contacts where email in (@email) and fingerprint is not null and username = @username"
      @email
      @username:x:/@whoami/*/username?value
    if:x:/@p5.mysql.select/*?count
      =:x:/@split/*?count

      /*
       * We have public PGP keys for all recipients.
       *
       * Now checking if these public keys actually exists in our GnuPG database.
       */
      p5.crypto.list-public-keys:x:/@p5.mysql.select/*/*/fingerprint?value
      if:x:/-/*?count
        =:x:/@p5.mysql.select/*?count

        /*
         * We have public PGP keys for all recipients, and they exists in our GnuPG database.
         *
         * Now checking if all recipients have verified PGP keys.
         */
        add:x:/+/*/\@email
          src:x:/@split/*?name
        p5.mysql.scalar:@"select count(*) from contacts where email in (@email) and fingerprint is not null and username = @username and isverified != 0"
          @email
          @username:x:/@whoami/*/username?value
        if:x:/@p5.mysql.scalar?value.int
          =:x:/@split/*?count

          /*
           * All keys were verified.
           */
          set:x:/@_status?value
            src:sephia-safe

        else

          /*
           * At least one key was not verified.
           */
          set:x:/@_status?value
            src:sephia-unknown

    else

      /*
       * We do *NOT* have public PGP keys for all recipients.
       */
      set:x:/@_status?value
        src:sephia-unsafe

  /*
   * Adding the correct CSS class.
   */
  micro.css.delete:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
    class:sephia-unsafe sephia-safe sephia-unknown
  eval-x:x:/+/*
  micro.css.add:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
    class:x:/@_status?value
