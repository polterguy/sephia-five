/*
 * Creates our "recipient" widget.
 *
 * Will allow the user to search through his contacts, and add new recipients to his email.
 *
 * Optionally pass in [to], [cc] and [bcc] as initial recipients of email.
 * These are collections of email addresses, where the email address is stored as the name of the node.
 */
create-event:sephia._internals.widgets.recipients

  /*
   * Adding specified recipients, first [to].
   */
  join:x:/../*/to/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=to/.
    src
      value:x:/@join?value

  /*
   * Then [cc].
   */
  join:x:/../*/cc/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=cc/.
    src
      value:x:/@join?value

  /*
   * Then [bcc].
   */
  join:x:/../*/bcc/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=bcc/.
    src
      value:x:/@join?value

  /*
   * Returning actual recipient widget to caller.
   */
  return
    container
      class:sephia-compose-recipients
      .ondrop-auto

        /*
         * Invoked by client when autocompleter should be destroyed.
         *
         * First deleting autocompleter.
         */
        p5.web.post.get:sephia-five-search
        p5.web.widgets.get-parent:x:/-/*?value
        p5.web.widgets.find-first:x:/-/*/*?value
          .auto
        delete-widget:x:/-/*/*?value

        /*
         * Then making sure we update our "status".
         */
        sephia.contacts._changed:x:/@p5.web.post.get/*?value

      .onclick-first

        /*
         * Invoked by client when user press carriage return from textbox.
         *
         * We simply select the first item from autocompleter.
         */
        p5.web.post.get:sephia-five-search
        p5.web.widgets.get-parent:x:/-/*?value
        p5.web.widgets.find-first:x:/-/*/*?value
          .auto
        if:x:/@p5.web.widgets.find-first/*/*?value

          /*
           * Autocompleter is visible, clicking first item.
           */
          p5.web.widgets.find-first-like:x:/@p5.web.widgets.find-first/*/*?value
            class:sephia-contacts-autocompleter-item
          p5.web.widgets.ajax-events.raise:x:/-/*/*?value
            onclick

      .onsearch-contacts

        /*
         * Retrieving the text widget that triggered the search, and the value
         * of the search.
         */
        p5.web.post.get:sephia-five-search
        get-widget-property:x:/-/*?value
          value

        /*
         * Splitting up value of widget on ",", in case it has multiple emails
         * from before, making sure we trim results for whitespace characters.
         */
        split:x:/@get-widget-property/*/*?value
          trim:true
          =:,

        /*
         * Used to store what the user is actually searching for.
         *
         * By default, this is the last result from our above [split].
         */
        eval-x:x:/+
        _search:x:/@split/0/-?name

        /*
         * Checking if user has an empty search, which is true if textbox value
         * ends with a "," after being trimmed.
         */
        set:x:/@get-widget-property/*/*?value
          trim-right:x:/@get-widget-property/*/*?value
        if
          ends-with:x:/@get-widget-property/*/*?value
            src:","

          /*
           * User has not yet typed any query at all, defaulting to "empty search",
           * to show the last 5 contacts.
           */
          set:x:/@_search?value
            src:

        else

          /*
           * User has typed something in, making sure we remove last entry
           * from [split] results, since split contents is used to exclude entries.
           */
          set:x:/@split/0/-

        /*
         * Checking if user already has existing emails added, at which point we
         * exclude these email addresses out of the search query results.
         */
        if:x:/@split/*
          add:x:/+/*/*
            src:x:/@split/*?name
          add:x:/../*/sephia.contacts.find
            src
              exclude

        /*
         * Searching contacts list for a match of 5 first contacts.
         */
        sephia.contacts.find:x:/@_search?value
          max:5

        /*
         * Retrieving parent container widget, which we will use as the parent
         * for our autocompleter widget.
         */
        p5.web.widgets.get-parent:x:/@p5.web.post.get/*?value
        p5.web.widgets.get-parent:x:/-/*/*?value

        /*
         * Checking if a previous autocompleter exists, and if so,
         * making sure we delete it.
         */
        p5.web.widgets.find:x:/@p5.web.widgets.get-parent/*/*?value
          .auto
        if:x:/@p5.web.widgets.find/*/*?value

          /*
           * Previous autocompleter exists, deleting it.
           */
          delete-widget:x:/@p5.web.widgets.find/*/*?value

        /*
         * Checking if we have any matches at all, and if not, returning early.
         */
        if:x:/@sephia.contacts.find/*
          not

          /*
           * No results.
           */
          p5.web.send-javascript:@"p5.sephia_contacts_has_data = false;"
          return

        /*
         * Adding a widget for each result from above search.
         */
        for-each:x:/@sephia.contacts.find/*
          eval-x:x:/+/*/*/*|/+/*/*/*/onclick/*/_widget
          add:x:/../*/create-widget/*/widgets
            src
              a
                href:#
                class:sephia-contacts-autocompleter-item
                role:button
                .value:x:/@_dp/#/*/email?value
                tabindex:-1
                innerValue:{0} <{1}>
                  :x:/@_dp/#/*/name?value
                  :x:/@_dp/#/*/email?value
                onclick

                  /*
                   * Forward evaluated above, and is a reference to the text 
                   * input widget this autocompleter is associated with.
                   */
                  _widget:x:/@p5.web.post.get/*?value

                  /*
                   * Retrieving the email address user selected.
                   */
                  get-widget-property:x:/../*/_event?value
                    .value

                  /*
                   * Adding the email address to the widget's value.
                   */
                  get-widget-property:x:/@_widget?value
                    value
                  split:x:/-/*/*?value
                    =:,
                  set:x:/-/0/-
                  join:x:/@split/*?name
                    sep:,
                  if:x:/@join?value
                    and:x:/@join?value
                      !=:
                    set:x:/@join?value
                      src:"{0}, "
                        :x:/@join?value
                  set-widget-property:x:/@_widget?value
                    value:"{0}{1}, "
                      :x:/@join?value
                      :x:/../*/get-widget-property/[0,1]/*/*?value

                  /*
                   * Deleting autocomplete widget.
                   */
                  p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                    .auto
                  delete-widget:x:/-/*/*?value


                  /*
                   * Setting focus to recipient text field.
                   */
                  micro.page.set-focus:x:/@_widget?value
                    no-select:bool:true

                  /*
                   * Making sure we update status of email, since we've got
                   * another recipe now.
                   */
                  sephia.contacts._changed:x:/@_widget?value

        /*
         * Creating autocompletion widget.
         */
        create-widget
          parent:x:/@p5.web.widgets.get-parent/*/*?value
          .auto
          class:sephia-contacts-autocompleter shaded rounded
          widgets

      oninit

        /*
         * Invoking this guy initially, to set the CSS classes correct for the
         * parent widget, according to whether or not email can be sent encrypted 
         * or not.
         */
        sephia.contacts._changed:x:/../*/_event?value

        /*
         * Making sure we include JavaScript, that handles our client side JavaScript
         * for our autocompleter.
         *
         * We handle "onfocus", "onkeydown" and "onblur", at which point we
         * raise server side events accordingly, that correctly shows or hides
         * our autocompleter.
         *
         * In addition, we also handle "onkeypress" in the widgets' themselves.
         */
        p5.web.include-javascript:@"
p5.sephia_contacts_has_data = true;
p5.sephia_search_contacts = function(e) {{
  if (!p5.sephia_contacts_has_data) {{return;}}
  setTimeout (function () {{
    var el = p5.$('{0}');
    if (!el) {{return;}}
    el.raise('.onsearch-contacts', {{
      onbefore:function (pars, evt) {{
        pars.push(['sephia-five-search', e.target.id]);
      }}
    }});
  }}, 1);
}}
p5.sephia_search_keydown = function (e) {{
  if (e.keyCode == 8 || e.keyCode == 46) {{
    p5.sephia_contacts_has_data = true;
    p5.sephia_search_contacts (e);
  }} else if (e.keyCode == 13) {{
    var el = p5.$('{0}');
    if (!el) {{return;}}
    el.raise('.onclick-first', {{
      onbefore:function (pars, evt) {{
        pars.push(['sephia-five-search', e.target.id]);
      }}
    }});
    p5.sephia_contacts_has_data = true;
    return false;
  }} else if (p5.sephia_isTextSelected (e.target)) {{
    p5.sephia_contacts_has_data = true;
    p5.sephia_search_contacts (e);
  }}
}}
p5.sephia_search_focus = function (e) {{
  if(e.target.value == '') {{
    p5.sephia_search_contacts (e);
  }}
  p5.sephia_contacts_has_data = true;
}}
p5.sephia_search_blur = function (e) {{
  setTimeout (function() {{
    var el = p5.$('{0}');
    if (el.el === null) {{return;}}
    el.raise('.ondrop-auto', {{
      onbefore:function (pars, evt) {{
        pars.push(['sephia-five-search', e.target.id]);
      }}
    }});
  }}, 500);
}}
p5.sephia_isTextSelected = function(txt) {{
    if (typeof txt.selectionStart == 'number') {{
        return txt.selectionStart != txt.selectionEnd;
    }}
}}"
          :x:/../*/_event?value

      class:row air-top
      widgets
        div
          class:col-50
          widgets
            div
              class:strip fill sephia-compose-to-wrapper
              widgets
                label
                  innerValue:To
                  oninit

                    /*
                     * Making sure label is associated with text input field.
                     */
                    p5.web.widgets.get-parent:x:/../*/_event?value
                    p5.web.widgets.find-first:x:/-/*/*?value
                      element:input
                    set-widget-property:x:/../*/_event?value
                      for:x:/@p5.web.widgets.find-first/*/*?value

                input
                  type:text
                  class:sephia-compose-recipients-to
                  .data-field:to
                  .recipient
                  onkeypress:@"p5.sephia_search_contacts(event);"
                  onkeydown:@"return p5.sephia_search_keydown(event);"
                  onfocus:@"p5.sephia_search_focus(event);"
                  onblur:@"p5.sephia_search_blur(event);"

        div
          class:col-25
          widgets
            div
              class:strip fill sephia-compose-cc-wrapper
              widgets
                label
                  innerValue:Cc
                  oninit

                    /*
                     * Making sure label is associated with text input field.
                     */
                    p5.web.widgets.get-parent:x:/../*/_event?value
                    p5.web.widgets.find-first:x:/-/*/*?value
                      element:input
                    set-widget-property:x:/../*/_event?value
                      for:x:/@p5.web.widgets.find-first/*/*?value

                input
                  type:text
                  class:sephia-compose-recipients-cc
                  .data-field:cc
                  .recipient
                  onkeypress:@"p5.sephia_search_contacts(event);"
                  onkeydown:@"return p5.sephia_search_keydown(event);"
                  onfocus:@"p5.sephia_search_focus(event);"
                  onblur:@"p5.sephia_search_blur(event);"

        div
          class:col-25
          widgets
            div
              class:strip fill sephia-compose-bcc-wrapper
              widgets
                label
                  innerValue:Bcc
                  oninit

                    /*
                     * Making sure label is associated with text input field.
                     */
                    p5.web.widgets.get-parent:x:/../*/_event?value
                    p5.web.widgets.find-first:x:/-/*/*?value
                      element:input
                    set-widget-property:x:/../*/_event?value
                      for:x:/@p5.web.widgets.find-first/*/*?value

                input
                  type:text
                  class:sephia-compose-recipients-bcc
                  .data-field:bcc
                  .recipient
                  onkeypress:@"p5.sephia_search_contacts(event);"
                  onkeydown:@"return p5.sephia_search_keydown(event);"
                  onfocus:@"p5.sephia_search_focus(event);"
                  onblur:@"p5.sephia_search_blur(event);"





/*
 * Given a widget as [_arg], will find all recipients of email, 
 * and verify that email can be sent encrypted or not, and modify status
 * of email composer accordingly.
 *
 * Basically, a smiley means email only has verified PGP fingerprints in its
 * list of recipients. Neutral means all recipients have PGP fingerprints, but 
 * not all of them are verified. Sad means that at least one recipient does not
 * have a PGP fingerprint associated with it at all.
 */
create-event:sephia.contacts._changed

  /*
   * Finding root ancestor, and all recipient input elements beneath, and figuring out all
   * emails we've currently got in our list of recipients (all field, To, Cc and Bcc).
   */
  p5.web.widgets.find-first-ancestor-like:x:/../*/_arg?value
    .email-composer
  p5.web.widgets.find:x:/-/*/*?value
    .recipient
  get-widget-property:x:/-/*/*?value
    value
  join:x:/-/*/*?value
    sep:,
  trim:x:/-?value
    chars:", "
  if:x:/-?value
    =:

    /*
     * There is no text in any of the recipients textbox input fields.
     * Defaulting to "sephia-unknown".
     */
    micro.css.delete:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
      class:sephia-unsafe sephia-safe
    micro.css.add:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
      class:sephia-unknown
    return

  /*
   * Then splitting up each email address from our above comma separated list.
   */
  split:x:/@trim?value
    =:,
    trim:bool:true

  /*
   * Used to temporary hold status of email.
   */
  _status:sephia-unsafe

  /*
   * Checking if all recipients have a public PGP key.
   */
  whoami
  p5.mysql.connect:[sephia]
    add:x:/+/*/\@email
      src:x:/@split/*?name
    p5.mysql.select:@"select fingerprint from contacts where email in (@email) and fingerprint is not null and username = @username"
      @email
      @username:x:/@whoami/*/username?value
    if:x:/@p5.mysql.select/*?count
      =:x:/@split/*?count

      /*
       * We have public PGP keys for all recipients.
       *
       * Now checking if these public keys actually exists in our GnuPG database.
       */
      p5.crypto.list-public-keys:x:/@p5.mysql.select/*/*/fingerprint?value
      if:x:/-/*?count
        =:x:/@p5.mysql.select/*?count

        /*
         * We have public PGP keys for all recipients, and they exists in our GnuPG database.
         *
         * Now checking if all recipients have verified PGP keys.
         */
        add:x:/+/*/\@email
          src:x:/@split/*?name
        p5.mysql.scalar:@"select count(*) from contacts where email in (@email) and fingerprint is not null and username = @username and isverified != 0"
          @email
          @username:x:/@whoami/*/username?value
        if:x:/@p5.mysql.scalar?value.int
          =:x:/@split/*?count

          /*
           * All keys were verified.
           */
          set:x:/@_status?value
            src:sephia-safe

        else

          /*
           * At least one key was not verified.
           */
          set:x:/@_status?value
            src:sephia-unknown

    else

      /*
       * We do *NOT* have public PGP keys for all recipients.
       */
      set:x:/@_status?value
        src:sephia-unsafe

  /*
   * Adding the correct CSS class.
   */
  micro.css.delete:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
    class:sephia-unsafe sephia-safe sephia-unknown
  eval-x:x:/+/*
  micro.css.add:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
    class:x:/@_status?value
