
/*
 * Creates our "recipient" widget.
 *
 * Will allow the user to search through his contacts, and add new recipients to his email.
 *
 * Optionally pass in [to], [cc] and [bcc] as initial recipients of email.
 * These are collections of email addresses, where the email address is stored as the name of the node.
 */
create-event:sephia.widgets._recipients

  /*
   * Adding specified recipients, first [to].
   */
  join:x:/../*/to/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=to/.
    src
      value:x:/@join?value

  /*
   * Then [cc].
   */
  join:x:/../*/cc/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=cc/.
    src
      value:x:/@join?value

  /*
   * Then [bcc].
   */
  join:x:/../*/bcc/*?name
    sep:", "
  eval-x:x:/+/*/*
  add:x:/../*/return/**/.data-field/=bcc/.
    src
      value:x:/@join?value

  /*
   * Returning actual recipient widget to caller.
   */
  return
    container
      class:sephia-compose-recipients
      oninit

        /*
         * Invoking this guy initially to set the CSS classes correct for the
         * parent widget according to whether or not email can be sent encrypted or not.
         */
        sephia.contacts._changed:x:/../*/_event?value

      class:row
      widgets
        div
          class:col-50 strip fill sephia-compose-to-wrapper
          widgets
            input
              type:text
              class:sephia-compose-recipients-to
              .data-field:to
              .recipient
              onchange

                /*
                 * Since our recipient list has potentiall changed, we might have to change background of
                 * main reply widget, to signify whether or not email can be sent encrypted or not.
                 */
                sephia.contacts._changed:x:/../*/_event?value

            button
              innerValue:To
              class:sephia-compose-recipients-to-btn
              title:Add to recipient
              onclick

                /*
                 * Shows contacts window, and allows user to select 
                 * a contact to add to recipient list.
                 */
                p5.web.widgets.get-parent:x:/../*/_event?value
                p5.web.widgets.find:x:/-/*/*?value
                  .data-field
                sephia.contacts._find:x:/-/*/*?value

        div
          class:col-25 strip fill sephia-compose-cc-wrapper
          widgets
            input
              type:text
              class:sephia-compose-recipients-cc
              .data-field:cc
              .recipient
              onchange

                /*
                 * Since our recipient list has potentiall changed, we might have to change background of
                 * main reply widget, to signify whether or not email can be sent encrypted or not.
                 */
                sephia.contacts._changed:x:/../*/_event?value

            button
              innerValue:Cc
              class:sephia-compose-recipients-cc-btn
              title:Add cc recipient
              onclick

                /*
                 * Shows contacts window, and allows user to select 
                 * a contact to add to recipient list.
                 */
                p5.web.widgets.get-parent:x:/../*/_event?value
                p5.web.widgets.find:x:/-/*/*?value
                  .data-field
                sephia.contacts._find:x:/-/*/*?value
        div
          class:col-25 strip fill sephia-compose-bcc-wrapper
          widgets
            input
              type:text
              class:sephia-compose-recipients-bcc
              .data-field:bcc
              .recipient
              onchange

                /*
                 * Since our recipient list has potentiall changed, we might have to change background of
                 * main reply widget, to signify whether or not email can be sent encrypted or not.
                 */
                sephia.contacts._changed:x:/../*/_event?value

            button
              innerValue:Bcc
              class:sephia-compose-recipients-bcc-btn
              title:Add bcc recipient
              onclick

                /*
                 * Shows contacts window, and allows user to select 
                 * a contact to add to recipient list.
                 */
                p5.web.widgets.get-parent:x:/../*/_event?value
                p5.web.widgets.find:x:/-/*/*?value
                  .data-field
                sephia.contacts._find:x:/-/*/*?value





/*
 * Active Event that shows contacts, and allows user to select
 * email from list of contacts, and add to given [_arg] input widget.
 */
create-event:sephia.contacts._find

  /*
   * Displaying contacts in a modal widget.
   */
  eval-x:x:/+/**/_widget
  create-widgets
    micro.widgets.modal:sephia-select-contact-modal
      class:micro-modal micro-modal-smaller sephia-compose-search-contacts
      widgets

        /*
         * Search textbox wrapper.
         */
        div:sephia-contacts-search-wrapper
          class:right sephia-compose-search-contacts-search-wrapper
          .offset:0
          widgets
            div
              class:strip sephia-compose-search-contacts-inner-search-wrapper
              style:"display:inline-block;"
              widgets
                input:sephia-select-contact-filter
                  type:text
                  class:sephia-compose-search-contacts-textbox
                  placeholder:Search ...
                  onkeydown:@"if (event.keyCode == 13) {p5.$('sephia-search-contacts-button').raise('onclick');return false;} else if (event.keyCode == 27) {p5.$('sephia-search-contacts-close-btn').raise('onclick');return false;}"
                  oninit

                    /*
                     * Setting initial focus to search textbox.
                     */
                    micro.page.set-focus:x:/../*/_event?value

                button:sephia-search-contacts-button
                  innerValue:@"<span class=""icon-search""></span>"
                  class:sephia-compose-search-contacts-search-btn
                  title:Search for contact
                  onclick

                    /*
                     * Retrieving search filter condition, and re-databinding grid.
                     */
                    get-widget-property:sephia-select-contact-filter
                      value
                    eval-x:x:/+/*
                    sephia.contacts.find._databind
                      filter:x:/@get-widget-property/*/*?value
                    micro.page.set-focus:sephia-select-contact-filter

                    /*
                     * Making sure we reset "offset".
                     */
                    set-widget-property:sephia-contacts-search-wrapper
                      .offset:0

                button
                  innerValue:@"<span class=""icon-chevron-left""></span>"
                  class:sephia-compose-search-contacts-go-previous-btn
                  title:Go to previous page
                  onclick

                    /*
                     * Retrieving filter condition and re-databinding contacts, 
                     * subtracting 10 from "offset".
                     */
                    get-widget-property:sephia-contacts-search-wrapper
                      .offset
                    if:x:/-/*/*?value.int
                      =:int:0

                      /*
                       * Already at the beginning of dataset.
                       */
                      return

                    -:x:/@get-widget-property/*/*?value.int
                      _:10
                    set-widget-property:sephia-contacts-search-wrapper
                      .offset:x:/@-?value

                    get-widget-property:sephia-select-contact-filter
                      value
                    eval-x:x:/+/*
                    sephia.contacts.find._databind
                      filter:x:/@get-widget-property/*/*?value
                      offset:x:/@-?value

                button
                  innerValue:@"<span class=""icon-chevron-right""></span>"
                  class:sephia-compose-search-contacts-go-next-btn
                  title:Go to next page
                  onclick

                    /*
                     * Retrieving filter condition and re-databinding contacts, 
                     * adding 10 from "offset".
                     */
                    get-widget-property:sephia-contacts-search-wrapper
                      .offset
                    +:x:/@get-widget-property/*/*?value.int
                      _:10
                    get-widget-property:sephia-select-contact-filter
                      value
                    eval-x:x:/+/*
                    sephia.contacts.find._databind
                      filter:x:/@get-widget-property/*/*?value
                      offset:x:/@+?value
                    if:x:/-?value
                      set-widget-property:sephia-contacts-search-wrapper
                        .offset:x:/@+?value

                button:sephia-search-contacts-close-btn
                  innerValue:@"<span class=""icon-close""></span>"
                  class:sephia-compose-search-contacts-close-btn
                  title:Close window
                  onclick

                    /*
                     * Closing modal "searchj for contact" window.
                     */
                    delete-widget:sephia-select-contact-modal

        /*
         * Actual datagrid.
         */
        micro.widgets.grid:sephia-select-contact-grid
          class:hover air-bottom sephia-compose-search-contacts-grid
          oninit

            /*
             * Initially databding grid without any filter.
             */
            sephia.contacts.find._databind

          events

            /*
             * Databinds contacts grid.
             * Optionally pass in [filter] and [offset].
             *
             * Notice, since this is a modal window, and there can only be one at the time,
             * we don't need to verify the invocation is to the current widget, since there
             * can only be one at the time.
             */
            sephia.contacts.find._databind
              .defaults
                offset:0
              whoami
              p5.mysql.connect:[sephia]
                p5.mysql.select:@"select name, email from contacts where username = @username and 
(name like @filter or email like @filter) limit 10 offset @offset"
                  @username:x:/@whoami/*/username?value
                  @filter:"%{0}%"
                    :x:/../*/filter?value
                  @offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value.int

              /*
               * Verifying we actually had a result.
               */
              if:x:/@p5.mysql.connect/*/p5.mysql.select/*?count
                =:int:0

                /*
                 * No result, returning early since grid was never in fact databound.
                 * Signaling the fact that grid was never databound to caller.
                 */
                return:bool:false

              /*
               * Adding row to grid databind invocation.
               */
              add:x:/+2
                src:x:/@p5.mysql.connect/*/p5.mysql.select/*
              add:x:/+/*
                src
                  .row

                    /*
                     * Making sure row becomes clickable, to allow user to select a contact
                     * by clicking the row.
                     */
                    onclick

                      /*
                       * Fetching email from innerValue on "td" element, and adding it to specified widget [_arg]
                       * during creation of grid.
                       * [_widget] was forward evaluated above.
                       */
                      _widget:x:/../*/_arg?value

                      /*
                       * Finding email from second td cell's innerValue.
                       */
                      p5.web.widgets.get-children:x:/../*/_event?value
                      get-widget-property:x:/-/0/1?value
                        innerValue

                      /*
                       * Appending email to text input widget's value, making sure we separate all emails with ",".
                       */
                      get-widget-property:x:/@_widget?value
                        value
                      _content
                      set:x:/@_content?value
                        src:"{0}, {1}"
                          :x:/../*/get-widget-property/[1,2]/*/*?value
                          :x:/../*/get-widget-property/[0,1]/*/*?value

                      /*
                       * Trimming away excessive ",", before we set widget's value to include also
                       * the newly added email address.
                       */
                      trim:x:/@_content?value
                        chars:", "
                      set-widget-property:x:/@_widget?value
                        value:x:/@trim?value

                      /*
                       * Deleting entire modal widget wrapping "search for contact", and
                       * setting focus to widget which now should contact the newly added email address.
                       */
                      delete-widget:sephia-select-contact-modal
                      micro.page.set-focus:x:/@_widget?value

                      /*
                       * Manually triggering [onchange] for widget, which will update main
                       * composer widget's CSS classes according to whether or not email can be encrypted
                       * or not.
                       */
                      p5.web.widgets.ajax-events.raise:x:/@_widget?value
                        onchange

              /*
               * Databinding contacts grid, which now should be populated according to above logic.
               */
              micro.widgets.grid.databind:sephia-select-contact-grid

              /*
               * Returning true to caller to signal that we were able to databind grid.
               */
              return:bool:true





/*
 * Given a widget as [_arg], will find all recipients of email, 
 * and verify that email can be sent encrypted or not, and modify background
 * of email composer accordingly.
 */
create-event:sephia.contacts._changed

  /*
   * Finding root ancestor, and all recipient input elements beneath, and figuring out all
   * emails we've currently got in our list of recipients (all field, To, Cc and Bcc).
   */
  p5.web.widgets.find-first-ancestor-like:x:/../*/_arg?value
    .email-composer
  p5.web.widgets.find:x:/-/*/*?value
    .recipient
  get-widget-property:x:/-/*/*?value
    value
  join:x:/-/*/*?value
    sep:,
  trim:x:/-?value
    chars:,
  if:x:/-?value
    =:

    /*
     * There is no text in any of the recipients textbox input fields.
     * Defaulting to "warning".
     */
    get-widget-property:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
      class
    if:x:/@get-widget-property/*/*?value
      ~:success
      micro.css.toggle:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
        class:success
    if:x:/@get-widget-property/*/*?value
      !~:warning
      micro.css.toggle:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
        class:warning
    return

  trim:x:/@join?value
    chars:,
  split:x:/-?value
    =:,
    =:" "

  /*
   * Checking if all recipients have a public PGP key.
   */
  p5.crypto.list-public-keys:x:/@split/*?name
  if:x:/-/*?count
    =:x:/@split/*/$?count
    or:x:/@split/*/$?count
      =:int:0

    /*
     * We have public PGP keys for all recipients, or there are no
     * recipients declared for composer.
     */
    get-widget-property:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
      class
    if:x:/@get-widget-property/*/*?value
      !~:success
      micro.css.toggle:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
        class:success
    if:x:/@get-widget-property/*/*?value
      ~:warning
      micro.css.toggle:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
        class:warning

  else

    /*
     * We do *NOT* have public PGP keys for all recipients.
     */
    get-widget-property:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
      class
    if:x:/@get-widget-property/*/*?value
      ~:success
      micro.css.toggle:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
        class:success
    if:x:/@get-widget-property/*/*?value
      !~:warning
      micro.css.toggle:x:/@p5.web.widgets.find-first-ancestor-like/*/*?value
        class:warning