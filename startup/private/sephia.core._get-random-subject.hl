
/*
 * Returns a new random subject, by traversing a random entry in user's [pgp-subjects] setting value.
 *
 * Notice, this will retrieve all potential subjects from one (random) URL in user's "subjects generator URLs",
 * store these potential candidates into user's session object, before returning one of them at random to caller.
 *
 * Hence, we are able to return (at least to some extent) an intelligent subject to caller, which will be used
 * as the MIME "Subject" instead of the real subject the user actually wrote, which will be put into the body
 * of the message, such that it becomes encrypted and hidden from any potential adversaries.
 */
create-event:sephia.core._get-random-subject

  /*
   * Checking session object if we have already stored potential 
   * subjects for the current user in our session object.
   */
  p5.web.session.get:sephia.core.random-subjects
  if:x:/@p5.web.session.get/*/*/*

    /*
     * We have more pending subjects, returning one of them at random.
     */
    p5.types.int.random
      max:x:/@p5.web.session.get/*/*/*?count
    return:x:/@p5.web.session.get/*/*/{0}?value
      :x:/@p5.types.int.random?value

  /*
   * Making sure we wrap our logic in a try/catch block, and if an exception occurs,
   * we return a random GUID.
   */
  try

    /*
     * Retrieving settings for user, since we need to know where to get our random subjects.
     */
    p5.auth.my-settings.get

    /*
     * Using one of user's random URLs from "subjects generator".
     */
    split:x:/@p5.auth.my-settings.get/*/sephia/*/pgp-subjects?value
      =:,
    p5.types.int.random
      max:x:/@split/*?count
    trim:x:/@split/{0}?name
      :x:/@p5.types.int.random?value

    /*
     * Retrieving entire HTML document from the random subject generator URL.
     */
    p5.http.get:x:/@trim?value

    /*
     * Adding all h6, h5, h4, h3 and h2 text elements into our [.subjects] temporary lambda.
     * Notice, we skip h1, since it's probably the main header for the website itself.
     */
    html2lambda:x:/@p5.http.get/*/result/*/content?value
    .subjects
    add:x:/@.subjects
      src:x:/@html2lambda/**(/h6|/h5|/h4|/h3|/h2)/**/\#text?value

    /*
     * Trimming all potential subjects.
     */
    for-each:x:/@.subjects/*
      set:x:/@_dp/#?value
        trim:x:/@_dp/#?value

    /*
     * Storing our potential subjects into session, to make next roundtrip faster, and avoiding
     * "slashdot'ing" our subject generator URL.
     */
    p5.web.session.set:sephia.core.random-subjects
      src:x:/@.subjects

    /*
     * Finding a random subject from our above list.
     */
    p5.types.int.random
      max:x:/@.subjects/*?count

    /*
     * For simplicity we invoke ourselves recursively, and return the value from second invocation,
     * although this time we'll get a "cache hit", and hence return early, before we retrieve our 
     * potential subjects from our "subjects generator URL".
     */
    sephia.core._get-random-subject
    return:x:/-?value

  catch

    /*
     * Oops, something went wrong.
     * One of the servers in our "subjects generator URLs" was probably down or something.
     *
     * Resorting to returning an "empty string" by default.
     */
    return:x:/-?value.string
