
/*
 * Will search the configured PGP key server for a key matching the given [_arg] query.
 */
create-event:sephia.core._search-key-server

  /*
   * Loading key server configuration setting.
   */
  load-file:@SEPHIA/config/key-server.hl

  /*
   * Using HTTP GET to query for key on server, making sure we URL encode query.
   */
  p5.html.url-encode:x:/../*/_arg?value
  add:x:/../*/p5.http.xxx
    src:x:/@load-file/*/*/search-key-url/*(!/http-verb!/query-arg-name!/.get-results)
  set:x:/../*/p5.http.xxx?name
    src:p5.http.{0}
      :x:/@load-file/*/*/search-key-url/*/http-verb?value
  p5.http.xxx:"{0}{1}={2}"
    :x:/@load-file/*/*/search-key-url?value
    :x:/@load-file/*/*/search-key-url/*/query-arg-name?value
    :x:/@p5.html.url-encode?value

  /*
   * Converting result from above HTTP GET invocation to a lambda object,
   * such that we can intelligently parse the results, to look for keys.
   *
   * We do this by invoking the [.get-results] in configuration file for key server.
   */
  eval-x:x:/+/*
  eval:x:/@load-file/*/*/search-key-url/*/.get-results
    result:x:/../*/~p5.http./*/result/*/content

  /*
   * Looping through each result from above invocation, and adding only the fingerprint parts
   * into our "return collection".
   */
  add:x:/../*/return
    src:x:/@eval/*

  /*
   * Returning results to caller.
   */
  return